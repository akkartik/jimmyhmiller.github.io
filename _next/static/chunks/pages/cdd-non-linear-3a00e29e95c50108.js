(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[428],{4194:function(e,t,i){"use strict";i.r(t);var n=i(9292),o=i(5893);t.default=function(){return(0,o.jsxs)(n.By,{children:[(0,o.jsx)(n.Dx,{text:"CDD and the Non-Linearity of Discovery"}),(0,o.jsx)("p",{children:"I have written previously about how Card Driven Development is extremely detrimental to the development process. In that essay I pegged the problem on CDDs lack of proper knowledge sharing and its incorrect splitting of responsibility. Today I want to focus on a different attribute of CDD that has been bothering me lately. This is the start of me trying to deliver on the promissory note I left at the end of the last essay. If we are to replace CDD we must start with an understanding of what programming is. That is our starting point today. Programming is theory building, does CDD help us build theories?"}),(0,o.jsx)("p",{children:"Perhaps my last essay could be seen as a bit of a caricature. I don\u2019t think it is, I have in fact seen this process play out in practice. But let\u2019s assume I am wrong. Maybe CDD isn\u2019t disasterous. Maybe I gave too much credit to a process for creating such turmoil. What then would the problem with CDD be? If you don\u2019t see the social problems of CDD that I do why should you not use it?"}),(0,o.jsx)(n.X6,{size:"2",text:"Theory Building and  the Non-Linearity of Discovery"}),(0,o.jsx)("p",{children:"Theory Building is an activity of trying to take information about the world and it put it to some particular use. Sherlock Holmes works to build his theories to apprehend criminals. Someone decorating a home builds their theory so that they might make their home cozy, habitable, and enjoyable to live in. A software engineer builds their theory to enable them to solve the problems at hand, not only the problems of today but the problems that will arise tomorrow."}),(0,o.jsx)("p",{children:"Consider an instance of complex theory building, how does it proceed? Does Sherlock Holmes proceed from clue to clue, following a linear path to apprehension of the criminal? No, the investigation is full of false starts, of reimaginings, of unexpected twists. But what is most important are Holmes's thoughts on the matter. Holmes's theory involves learning lessons and responding to them in unusual, particular ways. The process of learning and responding is important to his investigation. If Holmes merely gathered the data, brought it to the police and let them decide his next steps, would he have been as effective?"}),(0,o.jsxs)("p",{children:["The same is true for all theoretical investigations. These investigations give us embodied knowledge. The fact that ",(0,o.jsx)("em",{children:"we"})," ","worked out the theory is an important aspect of its creation. We had to go through this process of discover, we had to have the false starts, without them we would not have created the same theory."]}),(0,o.jsx)(n.X6,{size:"2",text:"CDD and its Incentives for Linearity"}),(0,o.jsx)("p",{children:"On the surface it might seem like CDD should allow for this non-linear process. CDD is common in agile circles where small iterations, retrospectives, and course corrections are advocated. Isn\u2019t agile explictly a response to methodologies like waterfall that didn\u2019t allow for non-linearity? In one sense of the term, yes, agile does not assume linearity. It accepts that you cannot know the destination from the beginning. But remember, the question is about CDD and the non-linearity of discover, not agile and planning non-linearity."}),(0,o.jsx)("p",{children:"CDD by its splitting of responsibility between two separate groups, product and engineering, makes using the results of discovery incredibly difficult. What is crucially missing is the allowance for discovery to take center stage when it comes to planning. As engineers work to build a theory (by programming) their discoveries must be incorporated into the plan. But what mechanism is available in CDD for doing so? Well, the primary mechanism is the card. This is the communication tool of choice, it is the pre-requisite for getting work sanctioned."}),(0,o.jsx)("p",{children:"But here is where the problem starts. The card cannot serve the task of feedback that it has been tasked with. It is inadequate for a few reasons. First, the time horizon for feedback to be incorporated and for course correction to occur is too long. As engineers are programming, they might find that their theory was incorrect, that the work they had planned to do is no longer the correct choice. What should they do? Well, given CDD the pressure is to forge ahead and file a card for future consideration. But often the correct answer is to stop the work you planned and instead go learn, go develop your theory better so you know the correct moves going forward."}),(0,o.jsx)("p",{children:"The card also fails to serve as a proper medium for conveying the information it needs to about this discovery process. First, cards are factual pieces of proposed works. They often take the form of a user story along with acceptance criteria. But this is not what is needed. Because CDD has split the responsibility for deciding what work is to be performed between product and engineering, what the engineer now has to do is convince product that what they have discovered is the truth. They need to help product understand their theory."}),(0,o.jsx)("p",{children:"Finally, the card fails because it assumes that all the work to be done has a deliverable. The process of discovery is however not like this. When working to build a theory much of the work we do has no direct outcome. We make guesses that turn out the be wrong. We pursue paths that are dead ends. But this work was not useless. If programming is theory building and the primary output is knowledge rather than a build artifact or source code, then the engineer learning new things is the best possible outcome."}),(0,o.jsx)(n.X6,{size:"2",text:"Making CDD Work"}),(0,o.jsx)("p",{children:"In the previous section, I have ignored some of the nuances that occur in the CDD process that might make it seem I am not being fair, let me address those. First, is it true that engineers are not given the flexibility to course correct without creating a card? Well, if the card is written the way many advocates of CDD recommend, it would seem no. CDD advocates often say that a card should be about detailing a concrete customer problem, rather than a particular solution. It is up to the team to determine how best to solve this problem."}),(0,o.jsx)("p",{children:"Here we can say a few things. First, it is readily admitted by most parties that achieving this goal is something must companies struggle with. So CDD as it is practiced, rather than in its ideal form still runs into this issue quite a bit. But we can go further than this. What problems make sense to tackle, what problems are meaningful depends on the theory we have. How many times have we done work where we solved a particular problem, and solved it well, only to find out our customers didn\u2019t use it? Many times, our customers themselves told us about this problem, will even admit it solves the problem as originally stated, but it turns out they were wrong about their needs. Setting forth a problem constrains our theories, if in the process of discovery we come up with a new theory that sets us on a new course with new problems, what are we do to given CDD?"}),(0,o.jsx)("p",{children:"Next, I have acted as if the card is the only medium of communication available. If we view any guide on how to practice a CDD process, we will find this isn\u2019t accurate. The card is a starting point, it precedes the conversation. Planning is not about taking the card as given, it is about discussing the card and coming to an agreement as a team on the plan to move forward. And yet still this isn\u2019t enough to handle the discovery process. First, the card frames the discussion as does the planning meeting. The goal is to come to a decision for action, not to contemplate a theory. But even if this isn\u2019t a barrier, the card won\u2019t be adequate, because the knowledge that has been gained by the engineer might not be expressible for them. We can know all sorts of things we can\u2019t express. We can even teach others those things we cannot express. But the card is not the medium for doing so."}),(0,o.jsx)("p",{children:"Finally there are all sorts of different types of cards. What it might seem I am describing is a CDD process without the Spike card. The spike card is purpose built for the discovery process. It is a time-boxed card made for discover where the deliverable is the findings that the spike uncovered. And yet, this isn\u2019t adequate. The discover process is not a phase, it is not a time-boxed part of the process, it just is the process. If programming is theory building, then what has been relegated to a \u201cspike\u201d is really the main function we are performing, with code as a side-effect. But CDD get this exactly backwards."}),(0,o.jsx)(n.X6,{size:"2",text:"What Does This Process Look Like Without CDD?"}),(0,o.jsx)("p",{children:"It might seem like am saying that engineers ought to just spend all their time thinking, never committing to any plan, never taking actions toward concrete goals. I can certainly understand that reaction. CDD is meant to keep engineers grounded and to hold them accountable. We all have seen engineering teams who seemingly twiddle their thumbs all day, working and reworking things to no end, never delivering anything of value."}),(0,o.jsx)("p",{children:"Getting rid of CDD is not getting rid of accountability, nor is it getting rid of progress. It is about moving the decision making process closer to those who have to execute on these decisions. It is about accepting that knowledge matters when we need to make be sure we make the right decisions. It is about accepting that we need non-linear processes to discover what we ought to be working on."}),(0,o.jsx)("p",{children:"Our products today are technology. They are composed of bits. Why then should the \u201cproduct\u201d team not be experts in technology? How can they make the right decisions for the product if they don\u2019t truly understand it at the core, fundamental level? At the same time, how can engineers be expected to make the right decisions if they aren\u2019t given the data they need and allowed to build the theory regardless of what path reality pushes them towards?"}),(0,o.jsx)("p",{children:"CDD\u2019s push towards linearity is what causes this feeling that we can never accomplish anything in software. It is why year after year it seems that customer needs aren\u2019t being met. Over and over again CDD forces us down a linear path to dead-ends. It prevents feedback mechanisms from operating as they should. If we are to make engineering more productive and help engineers have a better understand of the problems they truly need to solve, we must rid ourselves of CDD."})]})}},9292:function(e,t,i){"use strict";i.d(t,{By:function(){return E},CN:function(){return T},Dx:function(){return L},Ee:function(){return w},Fz:function(){return I},Mc:function(){return P},Q_:function(){return C},R4:function(){return F},Rh:function(){return _},X6:function(){return z},rU:function(){return y}});var n=i(9499),o=i(5988),r=i.n(o),s=i(9008),a=i(1664),h=i.n(a),c=i(4394),l=i(2041),d=i(8903),u=i(6410),g=i(8603),m=i(5893);function p(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function f(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?p(Object(i),!0).forEach((function(t){(0,n.Z)(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):p(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}var y=h(),w=function(){return null},b=function(e){(0,u.Z)(e),e.languages.clojure=f(f({},e.languages.clojure),{},{number:/\b-?(0x)?\d*\.?\d+\b/g,logicVariable:/(\?|!)[a-zA-Z][a-zA-Z0-9-]+/})};b.displayName="clojure",b.aliases=[],c.Z.registerLanguage("javascript",l.Z),c.Z.registerLanguage("haskell",d.Z),c.Z.registerLanguage("clojure",b);var v=function(e){var t=e.children,i=e.right,o=e.top,r=e.left;e.buttom;return(0,m.jsx)("div",{style:(0,n.Z)({position:"absolute",right:i,left:r,top:o},"left",r),children:t})},x=function(e){var t=e.children,i=e.top,n=e.left,o=e.right,r=e.bottom;return(0,m.jsx)("div",{style:{paddingTop:i,paddingLeft:n,paddingRight:o,paddingBottom:r},children:t})},j=function(e){return function(e){var t,i,n;return(n=e.split("\n")).length>1&&n.shift(),i=function(e){return/^ */.exec(e)[0].length}((t=n)[0]),t.map((function(e){return e.substring(i,e.length)})).join("\n")}(e)},k=f(f({},g.mQ),{},{operator:{color:"#cb4b16"},logicVariable:{color:"#2aa198"},'pre[class*="language-"]':f(f({},g.mQ['pre[class*="language-"]']),{},{backgroundColor:"#fff"})}),D=function(e){var t=e.source,i=e.language;return(0,m.jsx)(c.Z,{language:i,style:k,children:j(t)})},C=function(e){var t=e.children;return(0,m.jsx)(D,{language:"javascript",source:t})},I=function(e){var t=e.children;return(0,m.jsx)(D,{language:"haskell",source:t})},T=function(e){var t=e.children;return(0,m.jsx)(D,{language:"clojure",source:t})},O=function(){return(0,m.jsx)(r(),{id:"1541984143",children:["body{font-family:helvetica,sans-serif;color:#333;line-height:1.5;}","a{color:#333;}"]})},W=function(e){var t=e.children;return(0,m.jsx)("div",{style:{margin:"0 auto",maxWidth:700},children:t})},B=function(e){var t=e.children;return(0,m.jsx)("p",{style:{fontSize:"1.5em"},children:t})},P=function(e){var t=e.items,i=e.Elem,n=void 0===i?B:i,o=e.title;return(0,m.jsxs)(m.Fragment,{children:[(0,m.jsx)(z,{text:o}),(0,m.jsx)("ul",{children:t.map((function(e){return function(e){var t=e.href,i=e.text,n=e.Elem;return(0,m.jsx)("li",{children:(0,m.jsx)(n,{children:(0,m.jsx)(y,{href:t,children:(0,m.jsx)("a",{children:i})})})},t)}(f(f({},e),{},{Elem:n}))}))})]})},z=function(e){var t,i=e.color,n=e.text,o=e.size;return t={1:"h1",2:"h2",3:"h3",4:"h4"}[void 0===o?1:o],(0,m.jsx)(t,{style:{color:i},children:n})},_=function(e){var t=e.children;return(0,m.jsx)("code",{style:{backgroundColor:"rgba(27,31,35,0.05)",padding:"0.2em 0.4em",borderRadius:3,fontFamily:"Monaco, monospace",fontSize:13,whiteSpace:"nowrap"},children:t})},F=function(e){var t=e.children;return(0,m.jsx)("blockquote",{style:{paddingLeft:20,margin:0,marginLeft:20,borderLeft:"0.25em solid #dfe2e5"},children:t})},L=function(e){var t=e.text;return(0,m.jsxs)(m.Fragment,{children:[(0,m.jsx)(s.default,{children:(0,m.jsx)("title",{children:t})}),(0,m.jsx)(z,{text:t,size:1})]})},E=function(e){var t=e.children;return(0,m.jsxs)(m.Fragment,{children:[(0,m.jsxs)(s.default,{children:[(0,m.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"}),(0,m.jsx)("link",{rel:"icon",href:"data:;base64,iVBORw0KGgo="}),(0,m.jsx)("meta",{name:"author",content:"Jimmy Miller"}),(0,m.jsx)("link",{rel:"alternate",type:"application/rss+xml",title:"jimmyhmiller.github.io",href:"feed.xml"})]}),(0,m.jsx)(O,{}),(0,m.jsxs)(W,{children:[(0,m.jsx)("div",{style:{position:"relative"},children:(0,m.jsx)(v,{right:0,top:0,children:(0,m.jsx)(y,{href:"/",children:(0,m.jsx)("a",{style:{textDecoration:"none"},children:(0,m.jsx)(z,{color:"#999",text:"Jimmy Miller"})})})})}),(0,m.jsx)(x,{top:70,children:t})]})]})}},1027:function(e,t,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/cdd-non-linear",function(){return i(4194)}])}},function(e){e.O(0,[774,621,854,888,179],(function(){return t=1027,e(e.s=t);var t}));var t=e.O();_N_E=t}]);