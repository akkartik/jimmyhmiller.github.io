<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[jimmyhmiller.github.io]]></title>
        <description><![CDATA[jimmyhmiller.github.io]]></description>
        <link>https://jimmyhmiller.github.io</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sat, 26 Feb 2022 19:37:51 GMT</lastBuildDate>
        <item>
            <title><![CDATA[Variants Explained]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Variants Explained</h1><p>Imagine you have the following request for a product you are building:</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5">Users should be able to login using the following methods:<ul><li>Username and Password</li><li>Phone Number</li><li>Facebook Login</li></ul></blockquote><p>As you are building this application you have to think about how to represent these user credentials. It might look something like this:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#93a1a1">// Username and Password auth</span>
userCredentials<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">{</span>
  username<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;test&quot;</span><span class="token" style="color:#586e75">,</span>
  password<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;password&quot;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#93a1a1">// phoneNumber auth</span>
userCredentials<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">{</span>
  phoneNumber<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;555-867-5309&quot;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#93a1a1">// Facebook Login</span>
userCredentials<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">{</span>
  token<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;VGhpcyBpcyBzdXBlciBzZWNyZXQ=&quot;</span> 
<span class="token" style="color:#586e75">}</span>
</code></pre><p>There is a problem with the above way of representing this scenario. Imagine we needed to write a function that uses these user credentials. We have to make sure to handle every single case.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">handleAuth</span><span class="token" style="color:#586e75">(</span><span class="token parameter">userCredentials</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>userCredentials<span class="token" style="color:#586e75">.</span>username <span class="token" style="color:#cb4b16">&amp;&amp;</span> userCredentials<span class="token" style="color:#586e75">.</span>password<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#93a1a1">// do stuff with username login</span>
  <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>userCredentials<span class="token" style="color:#586e75">.</span>phoneNumber<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#93a1a1">// do stuff with phone number login</span>
  <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>userCredentials<span class="token" style="color:#586e75">.</span>token<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#93a1a1">// do stuff with facebook login</span>
  <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#93a1a1">// handle unknown scenario</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>This code may seem good as far as it goes, in fact, it even handles malformed data gracefully. Now imagine that our requirements change, we now need to handle third-party username and password requests as well. We decide to model this in the obvious way.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">userCredentials<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">{</span>
  username<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;test&quot;</span><span class="token" style="color:#586e75">,</span>
  password<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;password&quot;</span><span class="token" style="color:#586e75">,</span>
  thirdParty<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;SomeOtherBusiness&quot;</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Unfortunately, now our code breaks, but not by throwing a nice error, it breaks subtly. We will try to use third-party usernames and passwords for our own login system and since they have a username and password we will mistake them for first-party logins.</p><p>In javascript, there aren&#x27;t too many great solutions to this. One obvious one is to create a class for each of different userCredential type. Then for any function, we want to implement on our different types we implement a method in that class. That is how a Java developer may have solved this problem. That approach has its upsides and downsides, but rather than dive into those, let&#x27;s look at a different approach, one that isn&#x27;t supported by javascript. Since it isn&#x27;t supported by javascript we will have to choose some other language. But rather than choose an existing language, let&#x27;s just make up our own and imagine what it might be like to solve this problem in it.</p><h2>Variants: An Example</h2><p>The essence of our requirements is that we need to support different methods of login. Users may login this way <em>or</em> that way <em>or</em> some other way. We need a way to represent <strong>or</strong> in our data model. Variants allow us to do exactly that. Let&#x27;s first look at a simple example of a variant.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">Color</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Green</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Red</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Blue</span>
</code></pre><p>Here we have a variant with three choices of colors. In our world, a color can only be green, red, or blue. No other colors are available to us. What we need to do now is write a function that returns true if it is passed the <em>best</em> color.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn bestColor <span class="token" style="color:#586e75">{</span>
  <span class="token parameter">Green</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#268bd2">true</span>
  <span class="token parameter">Red</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#268bd2">false</span>
  <span class="token parameter">Blue</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#268bd2">false</span>
<span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#b58900">bestColor</span><span class="token" style="color:#586e75">(</span>Red<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// false</span>

<span class="token" style="color:#b58900">bestColor</span><span class="token" style="color:#586e75">(</span>Green<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// true</span>
</code></pre><p>This function is rather straightforward. We pattern match on the argument of the function to determine what was passed in. This allows us to express in a very concise way each case and what its output should be. Variants combined with pattern matching allow for very expressive, explicit code.</p><p>Simple variants like color are just like enums in other languages, but variants are much more useful when they can take arguments as well.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">UserCredentials</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">FirstParty</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">username</span><span class="token" style="color:#586e75">,</span> <span class="token hvariable">password</span><span class="token" style="color:#586e75">)</span>
                     <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Phone</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">phoneNumber</span><span class="token" style="color:#586e75">)</span>
                     <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Facebook</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">token</span><span class="token" style="color:#586e75">)</span>
                     <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">ThirdParty</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">username</span><span class="token" style="color:#586e75">,</span> <span class="token hvariable">password</span><span class="token" style="color:#586e75">,</span> <span class="token hvariable">thirdParty</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Here we have our login problem fully specified. Each case is represented as a data type and because of that, we can write a much less error-prone function for dealing with each case.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn handleAuth <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#b58900">FirstParty</span><span class="token" style="color:#586e75">(</span><span class="token parameter">username<span class="token" style="color:#586e75">,</span> password</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#93a1a1">// do stuff with username login</span>
  <span class="token" style="color:#b58900">Phone</span><span class="token" style="color:#586e75">(</span><span class="token parameter">phoneNumber</span> <span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#93a1a1">// do stuff with phone number login</span>
  <span class="token" style="color:#b58900">Facebook</span><span class="token" style="color:#586e75">(</span><span class="token parameter">token</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#93a1a1">// do stuff with facebook login</span>
  <span class="token" style="color:#b58900">ThirdParty</span><span class="token" style="color:#586e75">(</span><span class="token parameter">username<span class="token" style="color:#586e75">,</span> password<span class="token" style="color:#586e75">,</span> thirdparty</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#93a1a1">// do stuff with thirdParty login</span>
  <span class="token parameter">otherwise</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#93a1a1">// handle unknown scenario</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Not only is our function less error-prone, but it is also much easier to understand. Variants allow our code to be self-documenting. Each case is named and handled explicitly leading us to think precisely about each scenario. Since our imaginary language is dynamically typed, we do need to handle the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">otherwise</code> case (imagine someone passed in a number instead), but if it were statically typed we could be guaranteed that nothing other than those variants would be passed.</p><h2>Using Variants to Solve Problems</h2><p>Variants are not just limited to concrete scenarios like the login above. They can be quite a bit more generic and that can give us more power. Let&#x27;s look at a few generic variants that can be used to tackle common and difficult problems in programming.</p><h2>Nulls</h2><p>Null (undefined as well) is one of the most frustrating things to work with. Expressing nulls checks leads to verbose code. Code isn&#x27;t actually about the problem we are trying to solve. Variants offer an alternative to nulls, called the Maybe type.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">Maybe</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Nothing</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Something</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">thing</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>The definition above may seem a bit strange if this is your first time encountering it. What it says is that there are two cases we need to consider, when we have nothing (the null case) and when we have something (the non-null case). We can use this by pattern matching.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn tryToGetUserId <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span><span class="token parameter">user</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">getId</span><span class="token" style="color:#586e75">(</span>user<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
  <span class="token parameter">Nothing</span> <span class="token" style="color:#cb4b16">=&gt;</span> Nothing
<span class="token" style="color:#586e75">}</span>
</code></pre><p>The tryToGetUserId handles the case when we don&#x27;t have a user id by pattern matching on <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Nothing</code> and returning <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Nothing</code>. If however we get something (a user) then we get the id of that user and return <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Something</code> which contains a user.</p><p>The tryToGetUserId handles the case when we don&#x27;t have a user id by pattern matching on <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Nothing</code> and returning <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Nothing</code>. If however we get something (a user) then we get the id of that user and return <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Something</code>which contains a user.</p><p>As it stands, this isn&#x27;t that much better than null, but when combined with simple functions, this variant becomes infinitely more useful.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn map <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span></span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> Nothing</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> Nothing
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Here we have map. You may be familiar with map with it comes to lists and if so, map for <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Maybe</code> is very similar. As you can see from the function definition, map applies f only if we have <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Something</code>, if not it returns<code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Nothing</code>. Using map we can rewrite our tryToGetUserId function.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn <span class="token" style="color:#b58900">tryToGetUserId</span><span class="token" style="color:#586e75">(</span><span class="token parameter">maybeUser</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>getId<span class="token" style="color:#586e75">,</span> maybeUser<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Using map extracts out all the pattern matching and does it for us. This same pattern can work for other variants. <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">map</code> is much more general than just lists.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">Either</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Error</span> <span class="token hvariable">e</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Success</span> <span class="token hvariable">s</span>
<span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">List</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Nil</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Cons</span> <span class="token hvariable">x</span> <span class="token" style="color:#2aa198">tail</span>
<span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">Tree</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Leaf</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Node</span> <span class="token hvariable">left</span> <span class="token hvariable">x</span> <span class="token hvariable">right</span>
</code></pre><p>For each of these structures, there is a sensible map definition. <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Either</code>allows us to handle errors and only apply the function if we are not in an error state, mapping over a <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">List</code> applies the function to each element, and mapping over a tree applies the function to each node, recursing through the tree.</p><h2>Conclusion</h2><p>Variants are an extremely expressive way to state the assumptions behind our code. They force us to be explicit and handle cases individually. Yet, they also give a means of abstraction, a point at which we can define common interfaces and ignored the particularities underneath. In future posts we will take up this notion in more depth, showing how <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">protocols</code>when combined with <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">variants</code> can bring our language even more power.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/variants-explained</link>
            <guid isPermaLink="false">/variants-explained</guid>
        </item>
        <item>
            <title><![CDATA[Variants and Protocols]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Variants and Protocols</h1><p>In our last post, we explored variants and the way in which they allow us to express choice. We saw that variants are much more powerful than enums because they allow you to pass values. Pattern matching on variants allows code to be explicit yet concise. However, there is still a way to make variants even more powerful, the ability to write functions that apply to multiple types of variants.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">Maybe</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Nothing</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Something</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">thing</span><span class="token" style="color:#586e75">)</span>
</code></pre><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn map <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span></span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> Nothing</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> Nothing
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Above is our definition of the Maybe variant and its associated function, map. Just as map for a list applies a function to every element in the list, map for Maybe applies the function if there is an element. But if we defined map as we do above, it would conflict with the definition of List because they have the same name. We could just move each map definition into a module, but then we lose some of the benefits behind map. To see what that is, let&#x27;s explore some different structures that work with map.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">Either</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Error</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">e</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Success</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">x</span><span class="token" style="color:#586e75">)</span>
</code></pre><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn map <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Error</span><span class="token" style="color:#586e75">(</span>e<span class="token" style="color:#586e75">)</span></span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Error</span><span class="token" style="color:#586e75">(</span>e<span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Success</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span></span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Success</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>This is our first example, the Either Variant. Either allow us to have a value that is either a success or an error. If we have a success, then we want to apply our function to the successful value. If we have an error, applying a function wouldn&#x27;t make much sense.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">List</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Nil</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Cons</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">x</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#2aa198">tail</span><span class="token" style="color:#586e75">)</span>
</code></pre><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn map <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> Nil</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Nil</span>
  <span class="token" style="color:#586e75">(</span>f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">(</span><span class="token parameter"><span class="token" style="color:#b58900">Cons</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">,</span> tail<span class="token" style="color:#586e75">)</span></span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Cons</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>f<span class="token" style="color:#586e75">,</span> tail<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Here is actually the map you are probably most familiar with, mapping over a list. And yet I&#x27;m sure this definition is new for many of you. List here is our own custom list instead of the Array from javascript. This list is a linked list, and sticking with the naming convention used for a long time, each link is built up using a constructor called <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Cons</code>. In order to map over our list, we apply it to the first element and recurse over the rest of the list.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">Tree</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Leaf</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">|</span> <span class="token" style="color:#268bd2">Node</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">left</span><span class="token" style="color:#586e75">,</span> <span class="token hvariable">x</span><span class="token" style="color:#586e75">,</span> <span class="token hvariable">right</span><span class="token" style="color:#586e75">)</span>
</code></pre><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn map <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Leaf</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span></span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Leaf</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Node</span><span class="token" style="color:#586e75">(</span>left<span class="token" style="color:#586e75">,</span> x<span class="token" style="color:#586e75">,</span> right<span class="token" style="color:#586e75">)</span></span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Node</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>f<span class="token" style="color:#586e75">,</span> left<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>f<span class="token" style="color:#586e75">,</span> right<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Here we have a representation of a Tree. Mapping over a tree acts almost exactly like lists, a function is applied to every element, but with trees the structure is branched, so recursion needs to happen on both sides.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">data</span> <span class="token" style="color:#268bd2">Identity</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">Id</span><span class="token" style="color:#586e75">(</span><span class="token hvariable">x</span><span class="token" style="color:#586e75">)</span>
</code></pre><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">fn map <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Id</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span></span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Id</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>This is the Identity variant. It has a completely trivial map function. We take out the x and apply f to it and then wrap it back up. This may seem pointless (there are uses), but it does show yet another use of map.</p><h1>Unifying map</h1><p>Now that we&#x27;ve seen just some of the instances of how we could use map, it seems clear that just putting this in separate modules will lead to ugly code. We will have to refer to map using fully qualified names (e.g. Maybe.map, Either.map), this makes our code verbose, but also limits its reusability. As far as map is concerned, we shouldn&#x27;t care if we have Maybe, Either, or Identity, as long as we have an implementation of map. In other words, we want map to be a polymorphic function.</p><p>Protocols allow us to do exactly that, write functions that are polymorphic over a given datatype. When we pass a datatype to a function implemented as a protocol, it finds its type and dispatches to the proper function. Let&#x27;s look at the Mapper protocol.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">protocol Mapper <span class="token" style="color:#586e75">{</span>
  fn <span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x<span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#2aa198">&quot;&quot;</span><span class="token" style="color:#2aa198">&quot;maps f over x&quot;</span><span class="token" style="color:#2aa198">&quot;&quot;</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

implement <span class="token" style="color:#b58900">Mapper</span><span class="token" style="color:#586e75">(</span><span class="token parameter">Maybe</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  fn map <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#586e75">(</span><span class="token parameter"><span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">(</span><span class="token parameter">Nothing<span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> Nothing
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">map</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> Mapper<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">,</span> f<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>Here is our first protocol, the Mapper protocol. Mapper is simple, in order to implement the Mapper protocol, you need to define map. One thing to note, however, is that our definition in the protocol does differ from our definitions before by one small detail, the arguments are flipped. Protocols require the type they are going to dispatch on to be the first argument. That is why we define a simple auxiliary function that flips them back around.</p><p>Now that we&#x27;ve made our protocol and defined an implementation for Maybe, we can use it on any maybe values.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Something</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// Something(4)</span>
<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span> Nothing<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// Nothing</span>
</code></pre><p>What is special about this version of map is that as long as we define a Mapper implementation for a variant, we can pass a value of that variant to the map function and it will work.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">implement <span class="token" style="color:#b58900">Mapper</span><span class="token" style="color:#586e75">(</span><span class="token parameter">Either</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  fn map <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#586e75">(</span><span class="token parameter"><span class="token" style="color:#b58900">Error</span><span class="token" style="color:#586e75">(</span>e<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Error</span><span class="token" style="color:#586e75">(</span>e<span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">(</span><span class="token parameter"><span class="token" style="color:#b58900">Success</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">Success</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Error</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&quot;error&quot;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// Error(&quot;error&quot;)</span>
<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">Success</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// Success(4)</span>
</code></pre><p>We can see that our map does the right thing when passed a Maybe or an Either. This is a feature with no direct counterpart in javascript. Protocols allow us to extend functionality to new data types, they allow us to build common interfaces with which we can interact, and they allow this without a nested class hierarchy or any sort of monkey patching. Protocols offer a clean way to extend functionality through out our programs. They give us a way to add new capabilities to a library as well as to use old functions in new ways.</p><h1>Conclusion</h1><p>We have only seen a tiny glimpse into what protocols can do for us. The real power behind protocols comes when we group multiple fns together in a protocol and then build new functions that depend on that protocol. That may sound a bit abstract, but in our next post, we will dive in and implement a lodash like library that works on both built-in javascript data-structures and ImmutableJs data-structures all powered by protocols.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/variants-and-protocols</link>
            <guid isPermaLink="false">/variants-and-protocols</guid>
        </item>
        <item>
            <title><![CDATA[Protomorphism]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Protomorphism</h1><p>The last two posts ventured off into the hypothetical world. In that world, we had a language very much like javascript but with variants and protocols. Unfortunately, that language isn&#x27;t real, but that doesn&#x27;t mean we can&#x27;t sneak some of those ideas into our javascript. Today we are going to explore protocols further using a library called <a href="https://github.com/airportyh/protomorphism">Protomorphism</a> that adds protocols into javascript. </p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">import</span> protocol <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;protomorphism&#x27;</span>

<span class="token" style="color:#859900">const</span> Mapper <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">protocol</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span>
  <span class="token function-variable" style="color:#b58900">map</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">x<span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
   <span class="token" style="color:#93a1a1">// maps f over x</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>

Mapper<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">implementation</span><span class="token" style="color:#586e75">(</span>Array<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">{</span>
  <span class="token function-variable" style="color:#b58900">map</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">arr<span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> arr<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>f<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">map</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> Mapper<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">,</span> f<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// [3,4,5]</span>
</code></pre><p>Here we can see protomorphism in action with our Mapper protocol from the last post. This actually isn&#x27;t too different from the code we would write in our imaginary language. What we see here is basically all of protomorphism, it is a simple library that does one thing. In fact, it is only 31 lines of code. But fewer lines doesn&#x27;t mean less powerful. As promised in our last post, we are going to create our own lodash like library, but our library, using the power of protocols, will work whether we use normal Javascript Arrays, ImmutableJs Lists, or any type that implements our protocol.</p><h2>Sequence Protocol</h2><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> Sequence <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">protocol</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span>
  <span class="token function-variable" style="color:#b58900">cons</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll<span class="token" style="color:#586e75">,</span> elem</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#93a1a1">// prepends elem to coll</span>
  <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">,</span>
  <span class="token function-variable" style="color:#b58900">first</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#93a1a1">// gets first element of coll</span>
  <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">,</span>
  <span class="token function-variable" style="color:#b58900">rest</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#93a1a1">// returns all but first element</span>
  <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">,</span>
  <span class="token function-variable" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#93a1a1">// returns true if empty</span>
  <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">,</span>
  <span class="token function-variable" style="color:#b58900">empty</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#93a1a1">// given a coll, it will return</span>
    <span class="token" style="color:#93a1a1">// an empty collection of the same type</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Here is our Sequence protocol from which we will build all our lodash like functions. It is a simple protocol, with only five methods, each of which is fairly straightforward. Using these we can start building up more and more useful functions. Let&#x27;s start off with some very simple ones.</p><h2>Examples</h2><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> cons <span class="token" style="color:#cb4b16">=</span> Sequence<span class="token" style="color:#586e75">.</span>cons
<span class="token" style="color:#859900">const</span> first <span class="token" style="color:#cb4b16">=</span> Sequence<span class="token" style="color:#586e75">.</span>first
<span class="token" style="color:#859900">const</span> rest <span class="token" style="color:#cb4b16">=</span> Sequence<span class="token" style="color:#586e75">.</span>rest
<span class="token" style="color:#859900">const</span> isEmpty <span class="token" style="color:#cb4b16">=</span> Sequence<span class="token" style="color:#586e75">.</span>isEmpty
<span class="token" style="color:#859900">const</span> empty <span class="token" style="color:#cb4b16">=</span> Sequence<span class="token" style="color:#586e75">.</span>empty

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">second</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">rest</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">ffirst</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">last</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#859900">undefined</span>
  <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">rest</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">last</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">rest</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>We start off with simple aliases to our Sequence functions we need to use. This is purely for convenience&#x27;s sake and not necessary. Next we implement two very simple functions, <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">second</code> and<code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap"> ffirst</code>. Second does what it says, it gives of the second element of a collection; ffirst gives us the first of the first element of the collection. Below should illustrate the difference clearly.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> coll <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">]</span>
<span class="token" style="color:#b58900">second</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// [2]</span>
<span class="token" style="color:#b58900">ffirst</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 1</span>
</code></pre><p>The <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">last</code> function is a little more involved, but if you are familiar with recursion it is very simple. If we are passed an empty collection, there is no last, so we return undefined. If we are passed a collection with only one thing in it, we return that thing. Otherwise, we take one item off the collection and find the last of that collection.</p><p>One thing to note is that these functions are perfectly comprehensible and sensible and yet we have not mentioned at all what data structure these functions are for. As far as our code is concerned, it doesn&#x27;t matter if this is an array, an immutable list, or any other type. All that matters for the functions above is that the data structure implements the Sequence protocol.</p><h2>Implementations</h2><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">Sequence<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">implementation</span><span class="token" style="color:#586e75">(</span>Immutable<span class="token" style="color:#586e75">.</span>List<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">{</span>
    <span class="token function-variable" style="color:#b58900">cons</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll<span class="token" style="color:#586e75">,</span> elem</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> coll<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">unshift</span><span class="token" style="color:#586e75">(</span>elem<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">empty</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> Immutable<span class="token" style="color:#586e75">.</span>List<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">of</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">first</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> coll<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">rest</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> coll<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">rest</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> coll<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span>
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>Above is our implementation of the sequence protocol for ImmutableJs Lists. Our Sequence protocol assumes that each of our functions has no side effects, so ImmutableJs is a perfect fit here. In fact, there are methods that correspond exactly to the methods on our the Sequence protocol. Now we can use the functions we wrote on ImmutableJs Lists.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> coll <span class="token" style="color:#cb4b16">=</span> Immutable<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">fromJS</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#b58900">second</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// List [2]</span>
<span class="token" style="color:#b58900">ffirst</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 1</span>
</code></pre><p>This works exactly the same as the example above. In our first example, we just assumed we had an implementation of Sequence for Javascript Arrays, let&#x27;s go ahead and write one now.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">Seq<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">implementation</span><span class="token" style="color:#586e75">(</span>Array<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">{</span>
    <span class="token function-variable" style="color:#b58900">cons</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll<span class="token" style="color:#586e75">,</span> elem</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
        coll <span class="token" style="color:#cb4b16">=</span> coll<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">slice</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// copy</span>
        coll<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">unshift</span><span class="token" style="color:#586e75">(</span>elem<span class="token" style="color:#586e75">)</span>
        <span class="token" style="color:#859900">return</span> coll
    <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">empty</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">first</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> coll<span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">rest</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
        coll <span class="token" style="color:#cb4b16">=</span> coll<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">slice</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// copy</span>
        coll<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">shift</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span>
        <span class="token" style="color:#859900">return</span> coll
    <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> coll<span class="token" style="color:#586e75">.</span>length <span class="token" style="color:#cb4b16">==</span> <span class="token" style="color:#268bd2">0</span>
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>The definition for Arrays is a tad bit uglier. This is due mainly to the fact that our protocol&#x27;s methods are assumed to be side-effect free, whereas Arrays methods mutate. So in order to do cons and rest, we must copy the array. Now, that we have defined the Sequence protocol for Arrays, all functions that just use protocol methods will work with Arrays.</p><h1>More Functions</h1><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">map</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> coll<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">cons</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>f<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">rest</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">filter</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">pred<span class="token" style="color:#586e75">,</span> coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> coll<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">pred</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">cons</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">filter</span><span class="token" style="color:#586e75">(</span>pred<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">rest</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">filter</span><span class="token" style="color:#586e75">(</span>pred<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">rest</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">reduce</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> init<span class="token" style="color:#586e75">,</span> coll</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">isEmpty</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> init<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">reduce</span><span class="token" style="color:#586e75">(</span>f<span class="token" style="color:#586e75">,</span> init<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">rest</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">first</span><span class="token" style="color:#586e75">(</span>coll<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Here we have the three powerhouse lodash functions. By showing that we can implement these, it becomes easy to see how we can begin to implement all the functionality that lodash supports, but without depending on a concrete implementation.</p><h2>Conclusion</h2><p>Protocols give us the ability to reason at a higher level of abstractions. They provide us with a way to extend functionality to new code that we never planned for. This level of programming allows our code to be clear, yet powerful. In our next post, we are going to explore a similar, yet slightly different way to provide flexibility and extensibility, multi-methods.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/protomorphism</link>
            <guid isPermaLink="false">/protomorphism</guid>
        </item>
        <item>
            <title><![CDATA[Beautiful Code Through Simplicity]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Beautiful Code Through Simplicity</h1><p>Beautiful code is not about text. It isn&#x27;t about the function it serves. It isn&#x27;t line count. It isn&#x27;t whitespace. It isn&#x27;t how easy it was to write. Beautiful code is about one thing, structure. Simplicity of structure creates beautiful code, code that breathes, that hides no secrets; code that is readable, changeable, and comprehensible. If simplicity is to achieve these ends, it must be something a bit more than ease.</p><p>Ease in code writing is rather comfortable. It relaxes us, invigorates us, but ultimately it&#x27;s deceptive. Ease is a measure of our skill; it shows us what we are familiar with, what makes sense to us. But as such, ease necessarily fades as our problem grows more complex. Ease will not create beautiful code; familiarity isn&#x27;t always right. To obtain the beautiful code we seek, hard work is needed, not ease.</p><p>Simplicity is often used synonymously with ease. When we begin a tutorial for the new framework of the day, we will often think, &quot;how simple!&quot;, and while &quot;simple&quot; does lend itself well to this usage, it is often necessary to hijack words, to purify them so that our goal may be made clear. This process of turning an ordinary word, with its multifarious meanings, into a technical term may seem obnoxious to some, but once the process is through, speech becomes fluid, ideas can be built, and new areas explored.</p><h2>Complecting</h2><p>Simplicity can best be understood through a rather unusual word, &quot;complect&quot;. Complect literally means to &quot;join by weaving&quot;. Complecting code is the process of taking two independent concerns and intertwining them together. To grasp this let&#x27;s dive into some examples.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">fetchData</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#b58900">launchTheMissiles</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
  <span class="token" style="color:#859900">return</span> http<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">get</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&quot;/data&quot;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span> 
<span class="token" style="color:#586e75">}</span>
</code></pre><p>In this incredibly contrived example, we can see a rather egregious example of complecting. What does fetching data have to do with launching missiles? Absolutely nothing. The caller of this function would be rather surprised to know that he launched missiles just by fetching some data. But perhaps we need a less contrived and more controversial example.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">let</span> oldList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">let</span> newList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> i <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span> i <span class="token" style="color:#cb4b16">&lt;</span> oldList<span class="token" style="color:#586e75">.</span>length<span class="token" style="color:#586e75">;</span> i<span class="token" style="color:#cb4b16">++</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  newList<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">push</span><span class="token" style="color:#586e75">(</span>oldList<span class="token" style="color:#586e75">[</span>i<span class="token" style="color:#586e75">]</span> <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span> 
</code></pre><p>I&#x27;m sure the majority of people reading this see nothing wrong with code above. How is this code complecting anything? It is complecting data manipulation and time. To see this, ask yourself the following, what elements does newList contain? The answer depends on what time in the program it is. If we are before the loop none, in the middle of the loop it depends on what <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">i</code> equals, at the end of the loop [3,4,5]. Is this code easy to write? Of course but it lacks simplicity because it complects separate notions. Consider the following decomplected code.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> oldList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add2</span> <span class="token" style="color:#cb4b16">=</span> <span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x<span class="token" style="color:#cb4b16">+</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> newList <span class="token" style="color:#cb4b16">=</span> oldList<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>add2<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>Again let&#x27;s ask the same question, what elements does newList contain? There is no condition here. It only ever contains one value [3,4,5]. Now imagine that oldList was huge. It contained millions of entries. Could we run our first version in parallel? No, encoded into to is the notion that we must iterate over the list sequentially. What about our second version? Of course we can. Map does not encode how the operation has to work, but just what it should do.</p><h3>What isn&#x27;t being claimed</h3><p>Unlike the first code I showed, this second one may not be as familiar. I wouldn&#x27;t be surprised if some of you have never seen &quot;map&quot; before. So how can this code be more simple if fewer people are familiar with it? This is where we must remember that simplicity is not about familiarity. It is about keeping our concerns separate. Simplicity will not make it so everyone knows exactly what your code does. Its goal is to keep your code decomplected because decomplecting allows composition.</p><h2>Composition</h2><p>Complect and compose are opposites as far as programming goes. Where complecting mixes our concerns together, composition allows them to stay separate and be brought together in a straightforward fashion. Imagine that now instead of merely adding two to each element in our list, we want to filter out all the evens and then add two. Our first example would change to this:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> oldList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> newList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> i <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span> i <span class="token" style="color:#cb4b16">&lt;</span> oldList<span class="token" style="color:#586e75">.</span>length<span class="token" style="color:#586e75">;</span> i<span class="token" style="color:#cb4b16">++</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>i <span class="token" style="color:#cb4b16">%</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#cb4b16">==</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    newList<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">push</span><span class="token" style="color:#586e75">(</span>oldList<span class="token" style="color:#586e75">[</span>i<span class="token" style="color:#586e75">]</span> <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span> 
</code></pre><p>Now as a developer I must follow in my head each step to determine what code is called. The if statement adds an additional branch my code can take making it that much harder to trace. Our second example will change as follows:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> oldList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add2</span> <span class="token" style="color:#cb4b16">=</span> <span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">isEven</span> <span class="token" style="color:#cb4b16">=</span> <span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">%</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#cb4b16">==</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> newList <span class="token" style="color:#cb4b16">=</span> oldList<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">filter</span><span class="token" style="color:#586e75">(</span>isEven<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>add2<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>Rather than including our changes into the body of some loop, we create functions that can be applied anywhere we&#x27;d like. But we can take our decomplecting one step further. Imagine now that our oldList is no longer a list, but a promise, how do our examples change? Let&#x27;s start with the first example and see what perhaps seems like the most obvious way to change it.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> oldList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">getTheList</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> newList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>

oldList<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">then</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">list</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> i <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span> i <span class="token" style="color:#cb4b16">&lt;</span> list<span class="token" style="color:#586e75">.</span>length<span class="token" style="color:#586e75">;</span> i<span class="token" style="color:#cb4b16">++</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>i <span class="token" style="color:#cb4b16">%</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#cb4b16">==</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      newList<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">push</span><span class="token" style="color:#586e75">(</span>list<span class="token" style="color:#586e75">[</span>i<span class="token" style="color:#586e75">]</span> <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
  <span class="token" style="color:#586e75">}</span> 
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>Does this code work? Unfortunately no. We can see how our encoding of time caused us issues here. Again ask yourself the question, what elements does newList contain? Well, it depends if oldList has resolved or not. If it hasn&#x27;t newList will be empty. If it has then depending on what point in the for loop we are in, it has different values. We have introduced a race condition in our code. Of course, we can fix this bug without transitioning our code fully, moving newList into the function and returning it will work, but as we will see in the second example, this sort of bug is not possible.</p><p>Now what about our second example?</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> oldList <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">getTheList</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add2</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> x<span class="token" style="color:#cb4b16">+</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">isEven</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> x<span class="token" style="color:#cb4b16">%</span><span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#cb4b16">==</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> newList <span class="token" style="color:#cb4b16">=</span> oldList<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">then</span><span class="token" style="color:#586e75">(</span><span class="token parameter">list</span> <span class="token" style="color:#cb4b16">=&gt;</span> 
  list<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">filter</span><span class="token" style="color:#586e75">(</span>isEven<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>add2<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>This is the most obvious transformation. oldList is a promise, so obviously we can&#x27;t directly filter on it. We must call then and apply our transformations. So now, newList is a promise which contains our list. Our lack of complecting time and data transformation has paid off. </p><h2>Conclusion</h2><p>We could still yet take this code further down the path of decomplecting. Unfortunately, javascript doesn&#x27;t cooperate much fully with decomplecting. But that isn&#x27;t our concern for now. While these samples have been small, simplicity, in the sense of decomplecting, has already shown its benefits. As we move forward we will see more and more how our process of simplification can bring us closer and closer to our goal of beautiful code.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/beautiful-code</link>
            <guid isPermaLink="false">/beautiful-code</guid>
        </item>
        <item>
            <title><![CDATA[OOP from the Ground Up]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>OOP from the ground up</h1><p>Any concept when taken for granted can lead to misunderstanding. Concepts we don&#x27;t understand appear magical, making them either scary or compelling. In fact, typically the difference in attitude towards these magical objects is that of our peers. Despite the popular view that programming is an ever-changing field, new ideas in the programming world must fight a hard-fought battle. Often things that aren&#x27;t familiar to the programmer who encounters them are met with suspicion or disdain. But not so with objects, or at least not anymore. Objects have captured the popular mindshare of developers. Objects are the bread and butter of programming, to the point where people are often confused at how languages with no objects can exist at all. We are going to peel back those covers and implement our own objects from the ground up.</p><h2>The Simplest Object</h2><p>In order to begin, we must have a target in mind for our first object. A &quot;hello world&quot; of objects, from there we will move to more advanced features implementing them ourselves along the way.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> person <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">{</span>
  firstName<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;Alonzo&quot;</span><span class="token" style="color:#586e75">,</span>
  lastName<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#2aa198">&quot;Church&quot;</span>
<span class="token" style="color:#586e75">}</span>

person<span class="token" style="color:#586e75">.</span>firstName <span class="token" style="color:#93a1a1">// Alonzo</span>
person<span class="token" style="color:#586e75">.</span>lastName <span class="token" style="color:#93a1a1">// Church</span>
</code></pre><p>This is our target, so in order to implement it, we must understand it. The object above has two properties, firstName and lastName and it has some way to access those properties (the . operator). Now, our &quot;object&quot;, because it isn&#x27;t built into the language, is certainly not going to have as nice of a syntax as the one above, but we can definitely emulate the behavior of the object above.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">person</span><span class="token" style="color:#586e75">(</span><span class="token parameter">property</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>property <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#2aa198">&#x27;firstName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#2aa198">&#x27;Alonzo&#x27;</span><span class="token" style="color:#586e75">;</span>
  <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>property <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#2aa198">&#x27;lastName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#2aa198">&#x27;Church&#x27;</span><span class="token" style="color:#586e75">;</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#b58900">person</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;firstName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// Alonzo</span>
<span class="token" style="color:#b58900">person</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;lastName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// Church</span>
</code></pre><p>So here it is, our first &quot;object&quot;. It might be hard to see exactly how our function here is an object, but with a little squinting, we can see that it fulfills the exact same role as an object. The normal object has two properties that we can access, so does our &quot;object&quot;. The only difference between them is the method of access. Our normal objects have their properties accessed through the dot operator, while our &quot;objects&quot; are through function application. In fact, a simple shift in language can show just how similar our &quot;object&quot; is to real objects. </p><h3>Terminological</h3><p>SmallTalk is one of the first OO languages; almost all of what is thought about as OO stems from it. Unfortunately, we have lost a bit of SmallTalks terminology, terminology which would make things more clear. In the languages we are used to there are two ways to do things with objects, accessing properties (or fields) and invoking methods. With SmallTalk, there was just a single abstraction, message passing (This is called the &quot;uniform access principle&quot; and is the reason people often cite for Java getters/setters.) This &quot;limitation&quot; does not make SmallTalk any less capable. Everything you can do with objects in a modern language can be done in SmallTalk. Once we think about the dot operator as simply sending a message to our object, is our function application any different? We are simply sending the message as a string and our object is replying.</p><h2>More Advanced Objects</h2><p>Our first object (I hope you can see that I am justified in remove those quotes) was fairly limited. In order to make a new person with a different name, we would have to go write a whole new function. But our original javascript object had the same problem, while simpler in syntax, we still how to write out the whole thing. Let&#x27;s fix that.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">createPerson</span><span class="token" style="color:#586e75">(</span><span class="token parameter">firstName<span class="token" style="color:#586e75">,</span> lastName</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">return</span> <span class="token" style="color:#586e75">{</span>
    firstName<span class="token" style="color:#586e75">:</span> firstName<span class="token" style="color:#586e75">,</span>
    lastName<span class="token" style="color:#586e75">:</span> lastName
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> person <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">createPerson</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;Alonzo&#x27;</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#2aa198">&#x27;Church&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
person<span class="token" style="color:#586e75">.</span>firstName <span class="token" style="color:#93a1a1">// Alonzo</span>
person<span class="token" style="color:#586e75">.</span>lastName <span class="token" style="color:#93a1a1">// Church</span>
</code></pre><p>Simple enough change, we just made a function that takes some parameters and returns our object. In fact, we can do the same for our object.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">createPerson</span><span class="token" style="color:#586e75">(</span><span class="token parameter">firstName<span class="token" style="color:#586e75">,</span> lastName</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">return</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token parameter">property</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>property <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#2aa198">&#x27;firstName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#859900">return</span> firstName<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>property <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#2aa198">&#x27;lastName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#859900">return</span> lastName<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> person <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">createPerson</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;Alonzo&#x27;</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#2aa198">&#x27;Church&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#b58900">person</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;firstName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// Alonzo</span>
<span class="token" style="color:#b58900">person</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;lastName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// Church</span>
</code></pre><p>Since our object is just a function, we create a function that returns a function. Even with this &quot;factory&quot; function, our object continues to work just as it did before. But some of you may think, that&#x27;s not a &quot;real&quot; object, &quot;real&quot; objects have methods. So let&#x27;s add a method.</p><h3>Methods</h3><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">createPerson</span><span class="token" style="color:#586e75">(</span><span class="token parameter">firstName<span class="token" style="color:#586e75">,</span> lastName</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">return</span> <span class="token" style="color:#586e75">{</span>
    firstName<span class="token" style="color:#586e75">:</span> firstName<span class="token" style="color:#586e75">,</span>
    lastName<span class="token" style="color:#586e75">:</span> lastName<span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">fullName</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> firstName <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#2aa198">&quot; &quot;</span> <span class="token" style="color:#cb4b16">+</span> lastName<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#859900">const</span> person <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">createPerson</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;Alonzo&#x27;</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#2aa198">&#x27;Church&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
person<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">fullName</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span> <span class="token" style="color:#93a1a1">// Alonzo Church</span>
</code></pre><p>Alright, there we are, an object with a method, this won&#x27;t be too hard to recreate using our function technique.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">createPerson</span><span class="token" style="color:#586e75">(</span><span class="token parameter">firstName<span class="token" style="color:#586e75">,</span> lastName</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">return</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token parameter">property</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>property <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#2aa198">&#x27;firstName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#859900">return</span> firstName<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>property <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#2aa198">&#x27;lastName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#859900">return</span> lastName<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">else</span> <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>property <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#2aa198">&#x27;fullName&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#859900">return</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> firstName <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#2aa198">&quot; &quot;</span> <span class="token" style="color:#cb4b16">+</span> lastName<span class="token" style="color:#586e75">;</span>
      <span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">}</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> person <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">createPerson</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;Alonzo&#x27;</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#2aa198">&#x27;Church&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#b58900">person</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;fullName&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span> <span class="token" style="color:#93a1a1">// Alonzo Church</span>
</code></pre><p>That was simple enough. A method is really just a function. So all we need to do is have our object return a function when you access a property. Then you can call that function. Again though, some people might be saying, this isn&#x27;t a &quot;real&quot; object, &quot;real&quot; objects encapsulate state. </p><h3>State</h3><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">makeCounter</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">return</span> <span class="token" style="color:#586e75">{</span>
    value<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">,</span>
    <span class="token function-variable" style="color:#b58900">increment</span><span class="token" style="color:#586e75">:</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#859900">this</span><span class="token" style="color:#586e75">.</span>value <span class="token" style="color:#cb4b16">+=</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">;</span>
      <span class="token" style="color:#859900">return</span> <span class="token" style="color:#859900">this</span><span class="token" style="color:#586e75">.</span>value<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> counter1 <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">makeCounter</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> counter2 <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">makeCounter</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>

counter1<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">increment</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 1</span>
counter1<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">increment</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 2</span>

counter2<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">increment</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 1</span>
counter1<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">increment</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 3</span>
</code></pre><p>Here we have an object which encapsulates a bit of state. Each counter here keeps its own value. We can call increment on one counter, without affecting the other. This might seem a bit tricky to implement using our function-style objects, but it actually is no more complicated than any others.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">makeCounter</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">const</span> value <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span>
  <span class="token" style="color:#859900">return</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token parameter">property</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>property <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#2aa198">&#x27;increment&#x27;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
      <span class="token" style="color:#859900">return</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        value <span class="token" style="color:#cb4b16">+=</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">;</span>
        <span class="token" style="color:#859900">return</span> value<span class="token" style="color:#586e75">;</span>
      <span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">}</span>
  <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> counter1 <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">makeCounter</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> counter2 <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">makeCounter</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#b58900">counter1</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;increment&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 1</span>
<span class="token" style="color:#b58900">counter1</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;increment&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 2</span>

<span class="token" style="color:#b58900">counter2</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;increment&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// 1</span>
<span class="token" style="color:#b58900">counter1</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;increment&#x27;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#93a1a1">// 3</span>
</code></pre><p>Our object with encapsulated state makes use of closures to hold state. In fact, in this version, our state is actually further encapsulated because our value isn&#x27;t publicly accessible. The only way anyone can get at the value is by sending the message &#x27;increment&#x27;.</p><h3>More to come</h3><p>This is of course a lot more to object-oriented programming than what has been shown here. Most notably missing from the discussion is inheritance. Unfortunately addressing inheritance is a bit outside the scope of this article. Perhaps we will revisit it at some point in the future. But even with that feature left out, I hope some of the magic has been removed from objects. Objects aren&#x27;t special. We don&#x27;t need magic to make them, we just need simple functions.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/oop-ground-up</link>
            <guid isPermaLink="false">/oop-ground-up</guid>
        </item>
        <item>
            <title><![CDATA[Side Effects, Complecting a la Carte]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Side Effects, Complecting a la Carte</h1><p>There are many concepts we learn as we continue our adventure in programming languages. Objects, polymorphism, inheritance, and a whole host of others. Often these concepts are taught with the goal of making our code simpler, yet more often than not, they make our code more complex, in other words, they <a href="/beautiful-code">complect</a> them. In this post, we dive into where most of the inessential complexity of our programs comes from, side effects.</p><h2>Programming Functions are Algebraic Functions</h2><p>A function in a programming language is the exact same thing as the function you learned about in mathematics.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">2</span>x
<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">f</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">*</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">;</span> 
</code></pre><p>The first example above is a mathematical function. The second is the exact same function in javascript. Functions serve one purpose, to take an input, apply a transformation, and return the new value. When we start thinking about functions in programming as mathematical functions we can smuggle mathematical concepts into our programming.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">f <span class="token" style="color:#b58900">∘</span> <span class="token" style="color:#586e75">(</span>g ∘ h<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span>f ∘ g<span class="token" style="color:#586e75">)</span> ∘ h
</code></pre><p>Above is the mathematical definition of function composition. It states that composing g and f is the same thing as first applying f to some value, then apply g to the return value of f. A simple implementation in javascript would be the following:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">var</span> <span class="token function-variable" style="color:#b58900">compose</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">g<span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">g</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>This code says that compose is a function that takes two functions f and g. Compose returns a function that takes an x, applies f to x, and then g to the result of f applied to x.</p><h3>What mathematics gains us</h3><p>Our compose function has a limitation, it can only compose two functions, but it seems like we should be able to chain compositions together to get more than two things composed as follows:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span>h<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span>g<span class="token" style="color:#586e75">,</span> f<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>This seems correct enough but couldn&#x27;t we also do the following?</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span>h<span class="token" style="color:#586e75">,</span> g<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> f<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>Are these different? How can we tell? Well, we could try a few examples.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span>add2<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span>add4<span class="token" style="color:#586e75">,</span> add3<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span> 
<span class="token" style="color:#93a1a1">// 11</span>
<span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span>add2<span class="token" style="color:#586e75">,</span> add4<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> add3<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// 11</span>
</code></pre><p>Well, it seems to hold in the case we thought of, but how do we know if it holds in general? This is what mathematics gives us. Since our functions are exactly the same as mathematical functions the laws which apply to mathematical functions apply to programming functions. In this case, the pertinent law is associativity.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">f <span class="token" style="color:#b58900">∘</span> <span class="token" style="color:#586e75">(</span>g ∘ h<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span>f ∘ g<span class="token" style="color:#586e75">)</span> ∘ h</code></pre><p>Associativity tells us that how we group our composition makes no difference to the result. Given this knowledge extending our composition function to an indefinite number of arguments is actually quite easy.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">compose2</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">g<span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#b58900">g</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">compose</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter"><span class="token" style="color:#cb4b16">...</span>fns</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> fns<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">reduce</span><span class="token" style="color:#586e75">(</span>compose2<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>First, we renamed our old compose function. Here the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">...</code> just says take the rest of the arguments and pack them into an array for us. Now we can simply compose as follows:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#b58900">compose</span><span class="token" style="color:#586e75">(</span>add2<span class="token" style="color:#586e75">,</span> add4<span class="token" style="color:#586e75">,</span> add3<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><h2>When Functions Aren&#x27;t</h2><p>Functions when they are mathematical objects give us ways to reason about our code. Even if we don&#x27;t bust out the associative law all the time we do get some guarantees from functions. For instance:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>x<span class="token" style="color:#586e75">)</span>
</code></pre><p>Seems rather obvious, but it is very easy to make this not hold. In other words, sometimes functions can cease to be functions.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">var</span> enabled <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">true</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">var</span> <span class="token function-variable" style="color:#b58900">f</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>enabled<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        enabled <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">false</span><span class="token" style="color:#586e75">;</span>
        <span class="token" style="color:#859900">return</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#859900">else</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> x<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// false</span>
</code></pre><p>Here &quot;functions&quot; in javascript do something that algebraic functions certainly can&#x27;t do, side effects. Side effects occur when our function accesses something outside itself. This reaching out of itself often involves changing the value of some variable, but can involve causing an effect, such as printing to the console or making an http request.</p><h3>But They Are Still Functions</h3><p>Calling these side-effecting functions not &quot;functions&quot; is not great terminologically. Javascript is going to call them functions whether they have side effects or not. So while it may be true in the mathematics sense, it doesn&#x27;t hold in javascript land. So instead let&#x27;s refer to functions in the algebraic sense as <em>pure functions</em> and side effecting functions as <em>impure functions</em>.</p><p>Pure functions are the perfect example of decomplected code. Pure functions do one thing, transform input. Impure functions are complecting a la carte. Inside an impure function, we can change anything, we can return different results depending on the time of the day and even return nothing. These side effects weave together the notion of an effect with the computation that needs to be done.</p><h3>But My Programs Need to do Something</h3><p>Side-effects (in Javascript) are of course necessary. Our programs must communicate with the outside world in some way. But unconstrained side-effects can incredibly complicate our code. Mixing our data transformations with side effects causes us to lose the ability to reason about our code accurately. Mutating variables causes us to have to keep track of more and more state as variables change. In fact, it is my conjecture that a large majority of hard to trace bugs come from some variable somewhere being changed to some value we did not expect.</p><h2>Conclusion</h2><p>So how do we constrain side effects? That de serves a whole post or three on that very topic but for now, we can keep it simple. First, always strive to write pure functions. Secondly, avoid mutation if at all possible. Finally, move all side effects to the edges of your programs. Future posts will explore these topics showing how constraining our side-effects eliminates whole classes of bugs commonly encountered in programming and leads to simpler code.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/side-effects-complect</link>
            <guid isPermaLink="false">/side-effects-complect</guid>
        </item>
        <item>
            <title><![CDATA[Basic Functional Studies]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Basic Functional Studies</h1><p>In the previous post, we observed some rules on how to get the most out of our functions. In this post, we will do exactly that, get the most out of them. But rather than diving straight into these techniques, we are going to come up with them ourselves. There is no better way to learn a concept than to arrive at it through simple steps. To see how we ourselves could have come up with these techniques.</p><h2>Map, Getting Rid of 50% of For Loops</h2><p>Let&#x27;s imagine we need to add <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">2</code> to every single item in a list. How would we write this code? Perhaps something like this.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">add2ToList</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">list</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">let</span> temp <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> i <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span> i <span class="token" style="color:#cb4b16">&lt;</span> list<span class="token" style="color:#586e75">.</span>length<span class="token" style="color:#586e75">;</span> i<span class="token" style="color:#cb4b16">++</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        temp<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">push</span><span class="token" style="color:#586e75">(</span>list<span class="token" style="color:#586e75">[</span>i<span class="token" style="color:#586e75">]</span> <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#859900">return</span> temp<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#b58900">add2ToList</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>This function most certainly works. It does precisely what we asked. But it isn&#x27;t very flexible. What if I want to add 3 to each item in the list? Well, I could go write a function called add3ToList, but that seems cumbersome, so instead let&#x27;s make this function more generic.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">addNToList</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">n<span class="token" style="color:#586e75">,</span> list</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">let</span> temp <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> i <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span> i <span class="token" style="color:#cb4b16">&lt;</span> list<span class="token" style="color:#586e75">.</span>length<span class="token" style="color:#586e75">;</span> i<span class="token" style="color:#cb4b16">++</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        temp<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">push</span><span class="token" style="color:#586e75">(</span>list<span class="token" style="color:#586e75">[</span>i<span class="token" style="color:#586e75">]</span> <span class="token" style="color:#cb4b16">+</span> n<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#859900">return</span> temp<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#b58900">addNToList</span><span class="token" style="color:#586e75">(</span>n<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Alright, problem solved. I can now add 3 or any number for that matter. Let&#x27;s try a different problem. I want I have a list of strings and I want to concatenate something onto the front of them. Here&#x27;s what that function might look like.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">function</span> <span class="token" style="color:#b58900">concatFrontList</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">s<span class="token" style="color:#586e75">,</span> list</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">let</span> temp <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> i <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span> i <span class="token" style="color:#cb4b16">&lt;</span> list<span class="token" style="color:#586e75">.</span>length<span class="token" style="color:#586e75">;</span> i<span class="token" style="color:#cb4b16">++</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        temp<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">push</span><span class="token" style="color:#586e75">(</span>s <span class="token" style="color:#cb4b16">+</span> list<span class="token" style="color:#586e75">[</span>i<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#859900">return</span> temp<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#b58900">concatFrontList</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&quot;hello, &quot;</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#2aa198">&quot;jimmy&quot;</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Again, this certainly works, but doesn&#x27;t it look remarkably similar to our addNToList? The name and one line are the only things that changed. If we decide instead of concatenating we want to replace, or substring, or any other operation we will have to write another function that is remarkably similar to this. Couldn&#x27;t we write a function that abstracts over this?</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">map</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">f<span class="token" style="color:#586e75">,</span> list</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">let</span> temp <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> i <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span> i <span class="token" style="color:#cb4b16">&lt;</span> list<span class="token" style="color:#586e75">.</span>length<span class="token" style="color:#586e75">;</span> i<span class="token" style="color:#cb4b16">++</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        temp<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">push</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>list<span class="token" style="color:#586e75">[</span>i<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#859900">return</span> temp<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add2</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">n</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> n <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add3</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">n</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> n <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">greet</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">s</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#2aa198">&quot;hello &quot;</span> <span class="token" style="color:#cb4b16">+</span> s<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>add2<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#93a1a1">// [3,4,5]</span>
<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>add3<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#93a1a1">// [4,5,6]</span>

<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>greet<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#2aa198">&quot;jimmy&quot;</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#93a1a1">// &quot;hello jimmy&quot;</span>
</code></pre><p>Map is that function. Map is a fairly interesting function because one of its arguments is itself a function. This function is then applied to every element of the list. What we&#x27;ve done is extract out the essence of what we were doing in those other functions and made it reusable. This use of functions as arguments to other functions is called &quot;higher-order functions&quot;.</p><h2>Partial application</h2><p>Higher-order functions allow us to abstract over behavior, not just data. We can extract out the essence of a certain transformation and allow the particulars to be passed in a function. But we still don&#x27;t have the full reusability we would like to. You&#x27;ll notice that we had to define two functions, add3 and add2 which basically do the same thing, let&#x27;s see if generalizing this to addN does anything for us.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">addN</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">n<span class="token" style="color:#586e75">,</span> x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> n <span class="token" style="color:#cb4b16">+</span> x<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add2</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">addN</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span> x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add3</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">addN</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">,</span> x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>add2<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span>add3<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>That&#x27;s not really any better, is it? The problem is map expects a function that takes one argument, but addN takes two. So we have to create functions that hard code some value of n and call addN underneath the hood. This doesn&#x27;t help our situation. But isn&#x27;t there something we can do? What if instead of writing those functions, addN just returned a function?</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">addN</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">n</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">x</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        <span class="token" style="color:#859900">return</span> n <span class="token" style="color:#cb4b16">+</span> x<span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">addN</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">addN</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>There we go, no more extra function definitions. AddN is a function that returns a function. That way we can use it directly in our map call. But there is something that isn&#x27;t very nice about this. First of all, it would be much messier if we had a function that took three arguments. Do we make it so they pass in two arguments and then finally the third? Do we make them pass one at a time? But really what isn&#x27;t great here is the fact that what our addN is supposed to do is obscured by the fact that we have to make it return a function. What if we could have our first addN definition but somehow make it return a function? We can by using a method called partial application.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">a<span class="token" style="color:#586e75">,</span> b</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> a <span class="token" style="color:#cb4b16">+</span> b<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">add</span><span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">bind</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">null</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">add</span><span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">bind</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">null</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Okay, now this probably seems a bit weird, what is this bind thing, and why are you passing null as the first argument? Unfortunately, javascript doesn&#x27;t support a beautiful way to do partial application, so we can use bind. Bind&#x27;s first argument is the &quot;this&quot; value of the function. Since we aren&#x27;t using &quot;this&quot;, we can set it to null. The rest of the arguments allow us to &quot;bind&quot; a value to one of the arguments of our function. In other words, when we say <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">add.bind(null, 2)</code> we are setting the &quot;a&quot; variable in add to 2 and then we are getting back a function that takes the rest of the arguments. In other words, bind takes any function and turns it into a function that returns functions!</p><h2>Currying</h2><p>Partial application is incredibly useful. It can eliminate tons of code repetition. In future posts, I guarantee we will see more uses of it will pop up, but there is a more powerful version of partial application. To see our problem let&#x27;s change our add function to accept three variables.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">add</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">a<span class="token" style="color:#586e75">,</span> b<span class="token" style="color:#586e75">,</span> c</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> a <span class="token" style="color:#cb4b16">+</span> b <span class="token" style="color:#cb4b16">+</span> c<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>
</code></pre><p>Now with partial application I can do all sorts of things, I can bind to &quot;a&quot;, bind to &quot;a&quot; and &quot;b&quot;, I could even bind to all three. But to do that, I have to explicitly call bind each time. So let&#x27;s say I want to first bind &quot;a&quot; and then later &quot;b&quot;, what will that look like.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">const</span> add2 <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">add</span><span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">bind</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">null</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> add2Then3 <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">add2</span><span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">bind</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">null</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Not very pretty if you ask me. This also creates some weird cases, what will I get back if I call &quot;add2(1)&quot;? Since I only passed in one argument instead of the two remaining arguments &quot;c&quot; is undefined and thus the whole thing is. What I&#x27;d love is to be able to pass in as many or as few arguments as I&#x27;d like and get back a function that takes the rest of them. This idea is called currying.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#b58900">add</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">4</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// 9</span>
<span class="token" style="color:#b58900">add</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">4</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// 9</span>
<span class="token" style="color:#b58900">add</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#268bd2">4</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// 9</span>
<span class="token" style="color:#b58900">add</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">4</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// 9</span>
</code></pre><p>If we had a curried version of add, this is what we could do. Unfortunately currying isn&#x27;t built into javascript by default, but it is available in the wonderful library lodash. Here&#x27;s how we can use it.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">let</span> <span class="token function-variable" style="color:#b58900">add</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">a<span class="token" style="color:#586e75">,</span>b<span class="token" style="color:#586e75">,</span>c</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> a <span class="token" style="color:#cb4b16">+</span> b <span class="token" style="color:#cb4b16">+</span> c<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>
add <span class="token" style="color:#cb4b16">=</span> _<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">curry</span><span class="token" style="color:#586e75">(</span>add<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
</code></pre><p>Now our function is curried! How is this useful? Let me leave you with one more example. </p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">let</span> <span class="token function-variable" style="color:#b58900">map</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#859900">function</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">fn<span class="token" style="color:#586e75">,</span> list</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">let</span> temp <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> i <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">;</span> i <span class="token" style="color:#cb4b16">&lt;</span> list<span class="token" style="color:#586e75">.</span>length<span class="token" style="color:#586e75">;</span> i<span class="token" style="color:#cb4b16">++</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
        temp<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">push</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>list<span class="token" style="color:#586e75">[</span>i<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
    <span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#859900">return</span> temp<span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#586e75">}</span>
map <span class="token" style="color:#cb4b16">=</span> _<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">curry</span><span class="token" style="color:#586e75">(</span>map<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>

mapAdd2 <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">add</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#b58900">mapAdd2</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// [3,4,5]</span>
<span class="token" style="color:#b58900">mapAdd2</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">4</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">5</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// [5,6,7]</span>
</code></pre><p>Here we took our map function and curried it. Now with our curried add we can combine the two, giving us a new function, something that maps and adds two. With currying, our functions can serve as readily combinable building blocks, allowing us to easily define high-level features.</p><h2>Conclusion</h2><p>Higher-Order Functions allow us to extract the essence of a function out. We can get great reuse of our functions and work a higher abstraction. Currying allows us to take general functions and slowly add specificity. At every step, we are in control of what our functions do, what arguments they are applied to, and just how reusable they are. The basic functional techniques make our code cleaner and simpler. While these techniques come with a learning curve, they ultimately reduce the surface area of, decomplect, and simplify our code.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/basic-functional-studies</link>
            <guid isPermaLink="false">/basic-functional-studies</guid>
        </item>
        <item>
            <title><![CDATA[Defending the Incommunicability of Programs]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Defending the Incommunicability of Programs</h1><p>Peter Naur&#x27;s essay &quot;Programming as Theory Building&quot; is an exploration into the essence of programming. What is the activity of programming? How does this notion affect our practice? As Naur sees it, understanding the nature of this activity is paramount, for, &quot;If our understanding is inappropriate we will misunderstand the difficulties that arise in the activity and our attempts to overcome them will give rise to conflicts and frustrations.&quot; Unfortunately, despite Naur&#x27;s consciousness-raising essay, we find ourselves in exactly this predicament.</p><p>As the title suggestions, Naur claims that programming is first and foremost a process of theory building. What Naur means by this is that what is most fundamental to the process of programming is not the source code, the documentation, or even the running program, it is instead the knowledge the programmer has.</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5"><p>One way of stating the main point I want to make is that programming in this sense primarily must be the programmers’ building up knowledge of a certain kind, knowledge taken to be basically the programmers’ immediate possession, any documentation being an auxiliary, secondary product.</p></blockquote><p>This notion of programming as theory building has received in general wide praise in secondary literature. It seems to be recognized widely that Naur&#x27;s view brings quite a bit to the table. But there is an aspect of Naur&#x27;s view has not received quite so much praise. This aspect may be called the &quot;incommunicability thesis&quot;. Naur puts it this way:</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5"><p>A main claim of the Theory Building View of programming is that an essential part of any program, the theory of it, is something that could not conceivably be expressed, but is inextricably bound to human beings.</p></blockquote><p>This seemingly radical thesis is not just a consequence of Naur&#x27;s view, but rather a main claim of it. In other words, to view programming as theory building, one must see that these theories are in some sense incommunicable. Given the strong importance Naur places on this thesis, it is surprising that commenters who are even supportive of the view tend to reject this major claim. For instance, Donald Knuth writes:</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5"><p>My experiences agree well with Peter Naur&#x27;s hypothesis that programming is &quot;theory building,&quot; and they strongly support his conclusion that programmers should be accorded high professional status. But I do not share Naur&#x27;s unproved assertion that &quot;reestablishing the theory of a program merely from the documentation is strictly impossible.&quot; On the contrary, I believe that improved methods of documentation are able to communicate everything necessary for the maintenance and modification of programs.</p></blockquote><p>The goal of this essay is to defend Naur&#x27;s view that theory is incommunicable. Naur himself does provide such a defense, but his defense took for granted philosophical background knowledge not shared by his readers. Not only this, but Naur&#x27;s defense is indirect. Here we will make explicit what was implicit in Naur, namely his reliance on Gilbert Ryle&#x27;s notion of theory building and division of knowledge into two distinct kinds. Having explicated the background Naur assumed, we will examine more closely his claims.</p><h3>Ryle&#x27;s Theory Building</h3><p>Gilbert Ryle is most known for his critique of Cartesian Dualism, the notion that the mind is an immaterial substance separate from the body. Ryle&#x27;s work, while remembered for its groundbreaking critique of dualism has a much broader scope. Ryle&#x27;s behaviorist theory requires that he separate mental talk from observable behavior. This self-imposed constraint requires Ryle to re-examine intellectual activity broadly and from this, we get beautiful descriptions of various intellectual activities, most important for our purpose, the activity of theory building.</p><p>It is here that difficulties arise. Theory is a word with many meanings and uses not all of which match Ryle&#x27;s. In fact, what we have in Ryle is a technical notion of theory. Theory for Ryle, while multifaceted has a particular meaning, one described in Ryle&#x27;s work not by definition, but by explicating its relations. In order to understand what Ryle means by a theory, we must pay close attention to these various relations and constraints he places upon it. We must distinguish between the act of building a theory, operations on a theory, and the theory itself.</p><p>Ryle&#x27;s notion of theory extends across disciplines, Marx and Sherlock Holmes, while differing in subject matter and method, built theories. Someone laboring to discover how to lay carpet in a room, making measurements, determining which way the carpet ought to be laid, is caught up in the act of theory building. The historian, as he studies the accounts of a battle, is building a theory about the battle&#x27;s proceedings. Given this broad view of theory building, it should not be a surprise that programming will fall into this category as well.</p><h4>Theory and Communication</h4><p>But what sort of thing is a theory that these people are building? We may be too tempted to identify a theory with some set of statements. For example, we may talk about Newton&#x27;s theory of motion by stating his three laws. We may speak of Sherlock&#x27;s theory of a case by citing a passage in which he lays out his conclusion as well as the twists and turns along the way that lead him to this conclusion. How can a theory be incommunicable if a theory just is a statement of some position?</p><p>This is where Ryle&#x27;s attention to detail pays off. Ryle helps us by making more precise the notion of theory, separating it from its manifestations and operations upon the theory. First Ryle wants to separate out building a theory from having a theory.</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5"><p>To have a theory or a plan is not itself to be doing or saying anything, any more than to have a pen is to be writing with it. To have a pen is to be in a position to write with it, if occasion arises to do so; and to have a theory or plan is to be prepared either to tell it or to apply it, if occasion arises to do so. The work of building a theory or plan is the work of getting oneself so prepared.</p></blockquote><p>Here Ryle contrasts the process of building the theory, from having a theory by talking about our abilities after we have a theory, the ability to state or apply our theory. From this, it would seem that a theory is some sort of proposition. If this is so, the work of building a theory would be that of memorization in order to recite a propositional statement. But this isn&#x27;t quite right.</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5"><p>Having a theory or plan is not merely being able to tell what one’s theory or plan is. Being able to tell a theory is, in fact, being able to make just one, namely the didactic exploitation of it. Mastery of Euclid’s theorems is not merely ability to cite them; it is also ability to solve riders to them, meet objections to them and find out the dimensions of fields with their aid.</p></blockquote><p>Having a theory must go beyond mere recitation. Theories are things that can be applied and to have a theory requires the ability to apply that theory. Theories are varied in their presentation and use and a certain level of mastery is required in order to claim possession of a theory. To put these in Ryle&#x27;s terms, having a theory involves aspects of knowing how and knowing that.</p><h4>Knowing How and Knowing That</h4><p>While not the originator of the idea, Ryle offers a spirited defense of the distinction between knowing how and knowing that. Roughing speaking to &quot;know how&quot;, is to have the ability to perform an action. Whereas &quot;knowing that&quot; is to justifiably believe a true fact. In <em>The Concept of Mind</em>, Ryle intends to defend two claims concerning these types of knowledge. First, &quot;knowing how&quot; and &quot;knowing that&quot; are not reducible to each other, they are two distinct forms of knowing. Secondly, &quot;knowing how&quot; doesn&#x27;t require prior instances of &quot;knowing that&quot;. This second claim we will not explore further, but in order to understand Ryle&#x27;s notion of theory, we must explore more Ryle&#x27;s separation of these two forms of knowing.</p><p>The stereotypical example used in philosophy when discussing this topic is that of a juggler. We are led to imagine a skilled juggler, who with ease can juggle various objects in various amounts. His hands rise and fall in perfect time with the objects. This is a perfect example of &quot;knowing how&quot;, our juggler has a certain intuitive understanding of the objects he is manipulating. He knows how high to throw an object, how quickly to move his hands to catch them as they fall; his knowledge is made evident by his performance.</p><p>There are some who suggest &quot;knowing how&quot; is just a species of &quot;knowing that&quot;. In the case of our juggler, the suggestion might be that there are certain propositions that the juggler knows such as &quot;If I am juggling N objects, I need to throw them up X feet at Y angle.&quot; In fact, if &quot;knowing how&quot; is reducible to &quot;knowing that&quot;, our juggler knows all sorts of propositions of this type. But, as Ryle argues, one could know all possible propositions about juggling and still themselves not be a skilled juggler. Juggling requires practice, it requires &quot;muscle memory&quot;, it requires us to build up knowledge of how, not just propositions about the activity of juggling.</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5"><p>To be a Newtonian was not just to say what Newton had said, but also to say and do what Newton would have said and done. Having a theory is being prepared to make a variety of moves, only some of which are teachings; and to teach something to someone, oneself or another, is, in its turn, to prepare him for a variety of tasks, only some of which will be further teachings.</p></blockquote><p>Here we can see Ryle&#x27;s insistence that theories require a sort of &quot;knowing how&quot;. We are to be &quot;prepared to make a variety of moves&quot;. Having a theory requires the ability to know how to wield this theory. It requires being able to put the theory into practice, to use it for its particular ends. This is not merely to sit in an armchair and draw conclusions from it, but to know our theory so well, we know how to teach it, how to answer queries about it, how to relate it to other things, how to modify it in the face of new evidence. Each different type of theory has its own use that for which it must be employed.</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5"><p>Sherlock Holmes’ theories were primarily intended to be applied in the apprehension and conviction of criminals, the thwarting of planned crimes and the exculpation of innocent suspects….His theories were applied, if further deductions were actually made from them, and if criminals were arrested and suspects released in accordance with them.</p></blockquote><h3>Programming as &quot;Knowing how&quot;</h3><p>With this philosophical background laid out, it becomes much easier to see what Naur might mean by statements like:</p><blockquote style="padding-left:20px;margin:0;margin-left:20px;border-left:0.25em solid #dfe2e5"><p>A main claim of the Theory Building View of programming is that an essential part of any program, the theory of it, is something that could not be conceivably be expressed, but is inextricably bound to human beings.</p></blockquote><p>Having a theory is to know how to do something. If a programmer has a theory about a program, he will know how to make changes to that program, we will be able to answer questions about that program, he will be able to explain parts of the program to others. But none of these presentations or applications of the theory of the program are the theory itself</p><p>If no presentation of a theory is the theory itself, it follows that no documentation can capture fully the theory of any program. If having a theory requires being able to perform certain moves, in the case of programming, making modifications to a program, then no program contains its own theory. In fact, no text, no video, no media of any sort can contain the theory of a program. Having a theory is something only a human can do.</p><h3>Implications</h3><p>The theories of the programs we write live inside us. As we move on to new projects, leave old companies, or forget about code we once wrote, those theories die. The code we wrote might live on. People may continue to run it, read it, modify it, but some understanding of that code lives (or lived) only in our heads. Try as we might, we cannot communicate this theory in its full.</p><p>As we inherit code bases written by others, we encounter the same things, codebases whose theories are gone to time or locked away in a location inaccessible to us. Programs that have been modified under many different theories, often incompatible ones. Bugs begin to find their way in, often at the intersection of two theories. Hacks begin to emerge as needs evolve, but theory is lacking. The code becomes worse and worse.</p><p>These are the facts we face as professional software engineers. We write code whose theories will one day be lost and we inherit codebases whose theories are long forgotten. If we are to do programming well, we must adopt practices that address these issues.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/incommunicability</link>
            <guid isPermaLink="false">/incommunicability</guid>
        </item>
        <item>
            <title><![CDATA[Named Function Composition]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Named Function Composition</h1><p>Some time ago I release a little library on NPM called <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">fluent-compose</code>. I&#x27;ve had some mixed feelings about my creation. I know that no one has, or will use it and if they looked at it would probably dismiss it. In fact, if I hadn&#x27;t written it, I would do the same. And yet, I think I&#x27;ve stumbled onto a fairly decent idea. By decent idea, I mean a hack. But before we dive into this hack, let&#x27;s look at the situation that gave rise to it.</p><p>There is this fantastic, little known library called <a href="https://zaphod.surge.sh/">Zaphod</a>. The idea behind Zaphod is to mirror Clojure&#x27;s immutable data API. This makes it incredibly simple to do immutable updates on plain javascript objects.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">import</span> <span class="token" style="color:#586e75">{</span> update<span class="token" style="color:#586e75">,</span> inc <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;zaphod/compat&#x27;</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> state <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">{</span> count<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#b58900">update</span><span class="token" style="color:#586e75">(</span>state<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#2aa198">&#x27;count&#x27;</span><span class="token" style="color:#586e75">,</span> inc<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// { count : 1}</span>
</code></pre><p>The way I&#x27;ve written the code above is actually not the default way Zaphod works. I imported the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">compat</code> part of zaphod. By default, the functions are exposed to take advantage of the function bind operator <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">::</code>. </p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">import</span> <span class="token" style="color:#586e75">{</span> update<span class="token" style="color:#586e75">,</span> inc<span class="token" style="color:#586e75">,</span> dec <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;zaphod&#x27;</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> state <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">{</span> count<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">,</span> otherCount<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">;</span>
state<span class="token" style="color:#586e75">:</span><span class="token" style="color:#586e75">:</span><span class="token" style="color:#b58900">update</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;count&#x27;</span><span class="token" style="color:#586e75">,</span> inc<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// { count : 1}</span>

state
    <span class="token" style="color:#586e75">:</span><span class="token" style="color:#586e75">:</span><span class="token" style="color:#b58900">update</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;count&#x27;</span><span class="token" style="color:#586e75">,</span> inc<span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">:</span><span class="token" style="color:#586e75">:</span><span class="token" style="color:#b58900">update</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;otherCount&#x27;</span><span class="token" style="color:#586e75">,</span> dec<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// {count: 1, otherCount: -1}</span>
</code></pre><p>This is actually some really neat functionality. It allows you to chain your operators together. We can build pipelines by continuing to bind. Unfortunately, we don&#x27;t get function bind syntax for free. Function bind is still a stage 0 proposal. This means there is a very good possibility it will never make it into javascript. In fact, after a few years of sitting at stage 0, it is basically considered dead. There is quite a lot of risk involved in using it and more conservative configurations like <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">create-react-app</code> wouldn&#x27;t use it.</p><p>But function bind syntax also has flaws even if it were accepted into the language. Function bind syntax abuses <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">this</code> the most misunderstood keyword in all of javascript. The functions you write with function binding in mind must use <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">this</code>, they can&#x27;t be normal functions. Of course, you can wrap up those functions, but if we need to wrap functions up, why not wrap them in a way that doesn&#x27;t require function bind?</p><p>This is where <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">fluent-compose</code> comes in. Let&#x27;s look at an example.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">import</span> <span class="token" style="color:#cb4b16">*</span> <span class="token" style="color:#859900">as</span> zaphod<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#586e75">{</span> update <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;zaphod/compat&#x27;</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">import</span> <span class="token" style="color:#586e75">{</span> threadFirst<span class="token" style="color:#586e75">,</span> fluentCompose <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;fluent-compose&#x27;</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#859900">const</span> transform <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">fluentCompose</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#b58900">threadFirst</span><span class="token" style="color:#586e75">(</span>zaphod<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#859900">const</span> transformer <span class="token" style="color:#cb4b16">=</span> transform
    <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">update</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;count&#x27;</span><span class="token" style="color:#586e75">,</span> inc<span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">update</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;otherCount&#x27;</span><span class="token" style="color:#586e75">,</span> dec<span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">set</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#2aa198">&#x27;anotherCounter&#x27;</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#b58900">transformer</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span>count<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">,</span> otherCount<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">,</span> anotherCounter<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// {count: 1, otherCount: -1, anotherCounter: 2}</span>

<span class="token" style="color:#b58900">update</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span> counters<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#586e75">{</span>count<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">,</span> otherCount<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#2aa198">&#x27;counters&#x27;</span><span class="token" style="color:#586e75">,</span> transformer<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">// {counters: {count: 1, otherCount: -1, anotherCounter: 2}}</span>
</code></pre><p>Here we see the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">threadFirst</code> function in use. This allows us to take a collection of functions, in this case <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">zaphod</code>, and wrap them up into a fluent interface. But what does this fluent interface do? It is just function composition. After calling it, we get a function back. We can now use this function to pass our data through the pipeline. Since what we get back is just a function, we can also pass this function around. We can see its use on line 14 as just a normal function that lets us perform a series of transformations on data.</p><p>This is a fairly simple use of <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">fluent-compose</code>, let&#x27;s take it one step further.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">import</span> <span class="token" style="color:#cb4b16">*</span> <span class="token" style="color:#859900">as</span> zaphod <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;zaphod/compat&#x27;</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">import</span> <span class="token" style="color:#cb4b16">*</span> <span class="token" style="color:#859900">as</span> lodashFpCollection <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;lodash/fp/collection&#x27;</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">import</span> <span class="token" style="color:#586e75">{</span> threadFirst<span class="token" style="color:#586e75">,</span> threadLast<span class="token" style="color:#586e75">,</span> fluentCompose <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;fluent-compose&#x27;</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#859900">const</span> zaphodTransform <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">threadFirst</span><span class="token" style="color:#586e75">(</span>zaphod<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> lodashTransform <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">threadLast</span><span class="token" style="color:#586e75">(</span>lodashFpCollection<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#859900">const</span> transform <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">fluentCompose</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#cb4b16">...</span>zaphodTransform<span class="token" style="color:#586e75">,</span>
  <span class="token" style="color:#cb4b16">...</span>lodashTransform<span class="token" style="color:#586e75">,</span>
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#859900">const</span> transformer <span class="token" style="color:#cb4b16">=</span> transform
  <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">map</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">filter</span><span class="token" style="color:#586e75">(</span><span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">%</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#cb4b16">===</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">set</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#b58900">transformer</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">,</span><span class="token" style="color:#268bd2">4</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">// [3, 6]</span>
</code></pre><p>Here we can see a combination of two totally separate libraries. In fact, I even used <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">lodash/fp</code> because rather than taking its primary argument first, it makes it last. Yet, we were still able to compose these libraries in a simple, yet flexible way. </p><p>Yet, <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">fluent-compose</code> holds still more power. This time, we will be using some of the lower level features of <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">fluent-compose</code>, explaining them here would be beyond the scope of this post.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#859900">import</span> <span class="token" style="color:#586e75">{</span> fluentCompose <span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">from</span> <span class="token" style="color:#2aa198">&#x27;fluent-compose&#x27;</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">baseReducer</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">state<span class="token" style="color:#586e75">,</span> action</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> state<span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">initialState</span> <span class="token" style="color:#cb4b16">=</span> <span class="token parameter">prev</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token parameter">init</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">state<span class="token" style="color:#586e75">,</span> action</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span>
  <span class="token" style="color:#b58900">prev</span><span class="token" style="color:#586e75">(</span>state <span class="token" style="color:#cb4b16">||</span> init<span class="token" style="color:#586e75">,</span> action<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">reduce</span> <span class="token" style="color:#cb4b16">=</span> <span class="token parameter">prev</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">type<span class="token" style="color:#586e75">,</span> f</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token parameter">state<span class="token" style="color:#586e75">,</span> action</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">{</span>
  <span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span>action <span class="token" style="color:#cb4b16">&amp;&amp;</span> action<span class="token" style="color:#586e75">.</span>type <span class="token" style="color:#cb4b16">===</span> type<span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">{</span>
    <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">f</span><span class="token" style="color:#586e75">(</span>state<span class="token" style="color:#586e75">,</span> action<span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">}</span>
  <span class="token" style="color:#859900">return</span> <span class="token" style="color:#b58900">prev</span><span class="token" style="color:#586e75">(</span>state<span class="token" style="color:#586e75">,</span> action<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#859900">const</span> <span class="token" style="color:#268bd2">INCREMENT</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#2aa198">&#x27;INCREMENT&#x27;</span><span class="token" style="color:#586e75">;</span>
<span class="token" style="color:#859900">const</span> <span class="token" style="color:#268bd2">DECREMENT</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#2aa198">&#x27;DECREMENT&#x27;</span><span class="token" style="color:#586e75">;</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">increment</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span>
  type<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">INCREMENT</span>
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#859900">const</span> <span class="token function-variable" style="color:#b58900">decrement</span> <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">=&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span>
  type<span class="token" style="color:#586e75">:</span> <span class="token" style="color:#268bd2">DECREMENT</span>
<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#859900">const</span> reducer <span class="token" style="color:#cb4b16">=</span> <span class="token" style="color:#b58900">fluentCompose</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span> initialState<span class="token" style="color:#586e75">,</span> reduce <span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">,</span> baseReducer<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#859900">const</span> counter <span class="token" style="color:#cb4b16">=</span> reducer
  <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">initialState</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">reduce</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">INCREMENT</span><span class="token" style="color:#586e75">,</span> <span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">+</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span>
  <span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">reduce</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">DECREMENT</span><span class="token" style="color:#586e75">,</span> <span class="token parameter">x</span> <span class="token" style="color:#cb4b16">=&gt;</span> x <span class="token" style="color:#cb4b16">-</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span>

console<span class="token" style="color:#586e75">.</span><span class="token" style="color:#b58900">log</span><span class="token" style="color:#586e75">(</span>
  <span class="token" style="color:#b58900">counter</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#b58900">increment</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#586e75">)</span>
</code></pre><p>Using <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">fluent-compose</code> we&#x27;ve made a fluent reducer for redux! No longer would we need to write switch statements in order to make a reducer. In fact, since <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">fluent-compose</code> just makes functions, you can use this reducer with combine reducers. But another really cool thing you can do with it is add on the reducer after the fact. One feature to note with this implementation is that it actually short circuits, as soon as it finds the action that matches the type, it returns, so there is no wasted computation.</p><h2>Why do I call this a hack?</h2><p>I really do think this library is really useful, but at the same time, I can&#x27;t help but feel a little weird about this library. In order to make this library work, I have to take advantage of the fact that functions are objects. I am making a function and then assigning methods to it. This definitely a strange thing to do. Now, I do avoid mutating the functions passed into, I &quot;copy&quot; them before I assign properties to them, but it still feels like the wrong means for accomplishing the task of creating a pipeline.</p><p>In fact, that is the thing that makes this library a hack; it is the wrong means. This library was created out of the limitation javascript imposes on us. How would we accomplish similar things in other languages? Here are just a couple of examples.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#93a1a1">;; Clojure</span>
<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">-&gt;&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">range</span> <span class="token" style="color:#268bd2">100</span><span class="token" style="color:#586e75">)</span>
     <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">partial</span> <span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
     <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> even?<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#93a1a1">-- Haskell</span>
<span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">|&gt;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">::</span> <span class="token hvariable">a</span> <span class="token" style="color:#cb4b16">-&gt;</span> <span class="token" style="color:#586e75">(</span><span class="token hvariable">a</span> <span class="token" style="color:#cb4b16">-&gt;</span> <span class="token hvariable">b</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">-&gt;</span> <span class="token hvariable">b</span>
<span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">|&gt;</span><span class="token" style="color:#586e75">)</span> <span class="token hvariable">a</span> <span class="token hvariable">f</span> <span class="token" style="color:#cb4b16">=</span> <span class="token hvariable">f</span> <span class="token hvariable">a</span>

<span class="token" style="color:#2aa198">range</span> <span class="token" style="color:#268bd2">100</span>
<span class="token" style="color:#cb4b16">|&gt;</span> <span class="token" style="color:#2aa198">map</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">+</span><span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#cb4b16">|&gt;</span> <span class="token" style="color:#2aa198">filter</span> <span class="token" style="color:#2aa198">even</span>
</code></pre><p>Above we see how we could accomplish similar things in Haskell and Clojure. Almost all functional programming languages have a way to do this. In fact, there are some much more powerful techniques for function composition in both Haskell and Clojure.</p><h3>Still interesting</h3><p>At the same time, this method has some interesting features all on its own. What we have done is allow our functions to have special ways in which they compose. Each function can determine for itself special composition points. At each point along the way, we keep these composition properties, allowing us to compose further. Each of these composition methods has a name, hence &quot;named function composition&quot;. While born out of necessity an implemented as a hack, there is something here, something interesting that might be worth exploring further. (Addendum: It has been two years and I&#x27;ve yet to explore it further.)</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/named-function-composition</link>
            <guid isPermaLink="false">/named-function-composition</guid>
        </item>
        <item>
            <title><![CDATA[Meander for Practical Data Transformation]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Meander for Practical Data Transformation</h1><p>As Clojure programmers we love data. We believe that, at its core, programming is just data manipulation. To that end, Clojure provides fantastic data literals for its immutable data structures. Moreover core provides tons of functions for the manipulation of data. But as our data grows more complex, things become difficult. Our beautiful declarative data transformation pipeline becomes a nested mess. We wind up, yet again, playing computer in our heads.</p><p>In this tutorial, we are going to build up slowly to understand how <a href="https://github.com/noprompt/meander/">Meander</a> can be used to solve practical data transformation problems. We will start with simple examples and move to more complicated ones, hopefully choosing problems that reflect the sorts of menial data transformation tasks we all encounter in our day jobs. Let&#x27;s start with some vanilla Clojure code.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> person
  <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;jimmy&quot;</span>
   <span class="token" style="color:#cb4b16">:preferred-address</span>
   <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;123 street ave&quot;</span>
    <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 2&quot;</span>
    <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Townville&quot;</span>
    <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;IN&quot;</span>
    <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;46203&quot;</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> reformat-preferred-address <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span>address <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:preferred-address</span> person<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:line1</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:address1</span> address<span class="token" style="color:#586e75">)</span>
               <span class="token" style="color:#cb4b16">:line2</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:address2</span> address<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
     <span class="token" style="color:#cb4b16">:city-info</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:city</span> address<span class="token" style="color:#586e75">)</span>
                 <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:state</span> address<span class="token" style="color:#586e75">)</span>
                 <span class="token" style="color:#cb4b16">:zipcode</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:zip</span> address<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Here we have a pretty decent Clojure function that converts between two different address formats. This sort of code is fairly common when we need to convert from the data requirements of one system to another. Honestly, with this simple example, the code is fairly straightforward. Our data requirements are simple and so our code isn&#x27;t difficult. Let&#x27;s look at how to accomplish this same task in Meander.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span>require &#x27;<span class="token" style="color:#586e75">[</span>meander.epsilon <span class="token" style="color:#cb4b16">:as</span> m<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> reformat-preferred-address <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/match person
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:preferred-address</span>
     <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">?address1</span>
      <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">?address2</span>
      <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">?city</span>
      <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">?state</span>
      <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">?zip</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span>
    
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:line1</span> <span class="token" style="color:#2aa198">?address1</span>
               <span class="token" style="color:#cb4b16">:line2</span> <span class="token" style="color:#2aa198">?address2</span><span class="token" style="color:#586e75">}</span>
     <span class="token" style="color:#cb4b16">:city-info</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">?city</span>
                 <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">?state</span>
                 <span class="token" style="color:#cb4b16">:zipcode</span> <span class="token" style="color:#2aa198">?zip</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Here is code that does the same thing written with Meander. One obvious thing to note is that the Meander version is much longer. Judging code based on the number of lines is not something we are going to do.</p><p>Let&#x27;s explain what is going on. First, we are using the Meander&#x27;s <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">match</code> feature. <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">match</code> takes the thing that we are matching on (<code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">person</code>), a pattern to try to match, and the output. Our pattern here is in the exact shape of the person map we passed in. In order to extract out pieces of this map, we use logic variables (<code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?address1</code>, <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?address2</code>, etc). Logic variables are just symbols that start with <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?</code>. We can assign values in our data to any logic variables we&#x27;d like and then use those logic variables in our output. One thing I love about this simple Meander example is that you can see the exact shape of the input immediately.</p><h2>Making Our Example Harder</h2><p>This example while somewhat realistic is very limited. While I like the fact that Meander&#x27;s match shows us the shape of our data, for simple examples like this, Clojure does pretty well. Let&#x27;s make things harder.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> person
  <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;jimmy&quot;</span>
   <span class="token" style="color:#cb4b16">:preferred-address</span>
   <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;123 street ave&quot;</span>
    <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 2&quot;</span>
    <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Townville&quot;</span>
    <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;IN&quot;</span>
    <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;46203&quot;</span><span class="token" style="color:#586e75">}</span>
   <span class="token" style="color:#cb4b16">:other-addresses</span> 
   <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;432 street ave&quot;</span>
     <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 7&quot;</span>
     <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Cityvillage&quot;</span>
     <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;New York&quot;</span>
     <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;12345&quot;</span><span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;534 street ave&quot;</span>
     <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 5&quot;</span>
     <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Township&quot;</span>
     <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;IN&quot;</span>
     <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;46203&quot;</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>In the example above we left out some things. A person has a preferred address, but they also have other addresses. We have a few different things we want to do with this data. First, we want to find all the distinct zip codes that a person has.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> distinct-zip-codes <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span>preferred-address-zip <span class="token" style="color:#586e75">(</span>get-in person <span class="token" style="color:#586e75">[</span><span class="token" style="color:#cb4b16">:preferred-address</span> <span class="token" style="color:#cb4b16">:zip</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
        other-zips <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:other-addresses</span> person<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">cons</span> preferred-address-zip other-zips<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Here is some pretty straightforward Clojure code for doing exactly that. I&#x27;m sure some people could have minor quibbles about how this is written, but I doubt other solutions would be much different. One thing to note here is that we have lost a little bit of the structure of our input data. We could maybe change that up a bit. Maybe using destructuring is the right approach? Regardless, this is a simple and reasonable Clojure function. Now, let&#x27;s look at the Meander version.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> distinct-zip-codes <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/match person
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:preferred-address</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">}</span>
     <span class="token" style="color:#cb4b16">:other-addresses</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">..</span>.<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Here is the exact same function, but we&#x27;ve introduced two new concepts. The first one is memory variables, in this case <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">!zip</code>. Memory variables start with <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">!</code> and remember all the values they match with. The next concept is the zero or more operator (<code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">…</code>). The zero or more operator says to repeat the pattern to its left zero or more times. In this case <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">{:zip !zips}</code>. Using these two, we can declaratively gather up all the zip codes in this data structure.</p><h3>Minor Modifications</h3><p>What happens if one of our zip codes is nil? Well for both of our functions, nil gets returned in the output. That is probably not what we want. Let&#x27;s fix that in both versions.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> distinct-zip-codes <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span>preferred-address-zip <span class="token" style="color:#586e75">(</span>get-in person <span class="token" style="color:#586e75">[</span><span class="token" style="color:#cb4b16">:preferred-address</span> <span class="token" style="color:#cb4b16">:zip</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
        other-zips <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:other-addresses</span> person<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> some? <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">cons</span> preferred-address-zip other-zips<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> distinct-zip-codes <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/match person
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:preferred-address</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">or</span> <span class="token" style="color:#268bd2">nil</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
     <span class="token" style="color:#cb4b16">:other-addresses</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">or</span> <span class="token" style="color:#268bd2">nil</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">..</span>.<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>These two functions aren&#x27;t that different. In Meander we could have used <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">filter</code> in the exact same way if we wanted. But it&#x27;s nice that we can set these conditions on the input, which is really more closely stating our intent. Here we used <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">or</code> a short-circuiting operator which says that we should match one of these patterns. Our first pattern is just the literal nil. If it is nil, the pattern will match, but it won&#x27;t be saved anywhere. If the value isn&#x27;t nil, it will be saved in our memory variable <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">!zips</code>. Before we move on to more complex examples, let&#x27;s consider one more modification. This time we want a distinct list of non-nil zips and cities output in a map like this <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">{:zips [] :cities []}</code>.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> distinct-zips-and-cities <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span>preferred-address-zip <span class="token" style="color:#586e75">(</span>get-in person <span class="token" style="color:#586e75">[</span><span class="token" style="color:#cb4b16">:preferred-address</span> <span class="token" style="color:#cb4b16">:zip</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
        preferred-address-city <span class="token" style="color:#586e75">(</span>get-in person <span class="token" style="color:#586e75">[</span><span class="token" style="color:#cb4b16">:preferred-address</span> <span class="token" style="color:#cb4b16">:city</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
        other-zips <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:other-addresses</span> person<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
        other-cities <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:other-addresses</span> person<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zips</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> some? <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">cons</span> preferred-address-zip other-zips<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
     <span class="token" style="color:#cb4b16">:cities</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> some? <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">cons</span> preferred-address-city other-cities<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> distinct-zips-and-cities <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/match person
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:preferred-address</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">or</span> <span class="token" style="color:#268bd2">nil</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">)</span>
                         <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">or</span> <span class="token" style="color:#268bd2">nil</span> <span class="token" style="color:#2aa198">!cities</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
     <span class="token" style="color:#cb4b16">:other-addresses</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">or</span> <span class="token" style="color:#268bd2">nil</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">)</span>
                        <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">or</span> <span class="token" style="color:#268bd2">nil</span> <span class="token" style="color:#2aa198">!cities</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#859900">..</span>.<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zips</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#2aa198">!zips</span><span class="token" style="color:#586e75">)</span>
     <span class="token" style="color:#cb4b16">:cities</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#2aa198">!cities</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>With both of these examples, I extended them in the most obvious way I could think of. I think the Meander held up pretty well, but I wouldn&#x27;t have written the plain Clojure function that way. Here&#x27;s what I probably would have done instead.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> distinct-zips-and-cities <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span>addresses <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">cons</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:preferred-address</span> person<span class="token" style="color:#586e75">)</span> 
                        <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:other-addresses</span> person<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zips</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> some? <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#cb4b16">:zip</span> addresses<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
     <span class="token" style="color:#cb4b16">:cities</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> some? <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">distinct</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#cb4b16">:city</span> addresses<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>I think this is a pretty good function. But what I find interesting is that I needed to refactor to get here. It took me a little bit to think this way. Ideally, small changes to output should not require us to restructure our code. In this case, the change is minor. But if we have to change our structure in such small cases, won&#x27;t we have to change it even more in larger cases?</p><h2>Searching with Meander</h2><p>All our examples up until this point have had one answer. Yes, that answer might have been a collection, but there was only one way for our pattern to match. This isn&#x27;t always the case. To see an example of that, let&#x27;s write some functions using this data structure.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> people
  <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;jimmy&quot;</span>
    <span class="token" style="color:#cb4b16">:addresses</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;123 street ave&quot;</span>
                 <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 2&quot;</span>
                 <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Townville&quot;</span>
                 <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;IN&quot;</span>
                 <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;46203&quot;</span>
                 <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">true</span><span class="token" style="color:#586e75">}</span>
                <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;534 street ave&quot;</span><span class="token" style="color:#586e75">,</span>
                 <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 5&quot;</span><span class="token" style="color:#586e75">,</span>
                 <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Township&quot;</span><span class="token" style="color:#586e75">,</span>
                 <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;IN&quot;</span><span class="token" style="color:#586e75">,</span>
                 <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;46203&quot;</span>
                 <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">false</span><span class="token" style="color:#586e75">}</span>
                <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;543 Other St&quot;</span><span class="token" style="color:#586e75">,</span>
                 <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 50&quot;</span><span class="token" style="color:#586e75">,</span>
                 <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Town&quot;</span><span class="token" style="color:#586e75">,</span>
                 <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;CA&quot;</span><span class="token" style="color:#586e75">,</span>
                 <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;86753&quot;</span>
                 <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">false</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span>
   <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;joel&quot;</span>
    <span class="token" style="color:#cb4b16">:addresses</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;2026 park ave&quot;</span>
                 <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 200&quot;</span>
                 <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Town&quot;</span>
                 <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;CA&quot;</span>
                 <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;86753&quot;</span>
                 <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">true</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>I apologize for the amount of room this takes up on the screen, but real-world examples are much larger. I want to try and make something that approaches realistic and to do that our input needs to be a bit bigger. Okay, so what we want to do now is given a zip code, find all people that have an address with that zip code, and for each of the addresses that match that zip code, return a map of<code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">{:name &lt;name&gt; :address &lt;address&gt;}</code>. So in this case, if we asked for zip <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">86753</code> we should get the following response:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;jimmy&quot;</span><span class="token" style="color:#586e75">,</span>
  <span class="token" style="color:#cb4b16">:address</span>
  <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;543 Other St&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 50&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Town&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;CA&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;86753&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">false</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span>
 <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;joel&quot;</span><span class="token" style="color:#586e75">,</span>
  <span class="token" style="color:#cb4b16">:address</span>
  <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;2026 park ave&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 200&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Town&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;CA&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;86753&quot;</span><span class="token" style="color:#586e75">,</span>
   <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">true</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Okay let&#x27;s start with the vanilla Clojure example.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> find-people-with-zip <span class="token" style="color:#586e75">[</span>people zip<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">for</span> <span class="token" style="color:#586e75">[</span>person people
        address <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:addresses</span> person<span class="token" style="color:#586e75">)</span>
        <span class="token" style="color:#cb4b16">:when</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">=</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:zip</span> address<span class="token" style="color:#586e75">)</span> zip<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:name</span> person<span class="token" style="color:#586e75">)</span>
     <span class="token" style="color:#cb4b16">:address</span> address<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>This code might not be very idiomatic. I almost never use <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">for</code> in actual code. But honestly, this was the most succinct way I could think to write it. We could also have written something like this:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> person-with-address-comb <span class="token" style="color:#586e75">[</span>person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">fn</span> <span class="token" style="color:#586e75">[</span>address<span class="token" style="color:#586e75">]</span>
         <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:name</span> person<span class="token" style="color:#586e75">)</span>
          <span class="token" style="color:#cb4b16">:address</span> address<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
       <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:addresses</span> person<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> find-people-with-zip <span class="token" style="color:#586e75">[</span>people zip<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">-&gt;&gt;</span> people
       <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">mapcat</span> person-with-address-comb<span class="token" style="color:#586e75">)</span>
       <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">comp</span> #<span class="token" style="color:#586e75">{</span>zip<span class="token" style="color:#586e75">}</span> <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#cb4b16">:address</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>It seems like there is a better way I&#x27;m overlooking. But regardless I think any of these solutions will be a tiny bit complicated. We&#x27;ve lost the shape of the input data. We have some imperative stuff going on here. Let&#x27;s contrast this with the Meander implementation.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> find-people-with-zip <span class="token" style="color:#586e75">[</span>people zip<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/search people
    <span class="token" style="color:#586e75">(</span>m/scan <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">?name</span>
             <span class="token" style="color:#cb4b16">:addresses</span> <span class="token" style="color:#586e75">(</span>scan <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> ~zip <span class="token" style="color:#cb4b16">:as</span> <span class="token" style="color:#2aa198">?address</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">?name</span>
     <span class="token" style="color:#cb4b16">:address</span> <span class="token" style="color:#2aa198">?address</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>This is actually incredibly straight forward even if unfamiliar. We are now using <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">search</code> to find multiple answers. Also note <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">~zip</code>. The <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">~</code> here let&#x27;s us splice in variables that are in scope. And finally, we can name our whole map using the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:as</code> pattern. This code reads like what we conceptually want to do, scan people&#x27;s addresses looking for zips that match the one passed in. We do not have to think at all about how this code runs.</p><h2>One Final Example</h2><p>For our final example of how Meander can be used to perform data manipulation, will show one feature of logic variables that we have left off so far. To do so we need some more complex data.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> data
  <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:people</span> 
   <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;jimmy&quot;</span> <span class="token" style="color:#cb4b16">:id</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;joel&quot;</span> <span class="token" style="color:#cb4b16">:id</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">&quot;tim&quot;</span> <span class="token" style="color:#cb4b16">:id</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span>
   <span class="token" style="color:#cb4b16">:addresses</span>
   <span class="token" style="color:#586e75">{</span><span class="token" style="color:#268bd2">1</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;123 street ave&quot;</span>
        <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 2&quot;</span>
        <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Townville&quot;</span>
        <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;IN&quot;</span>
        <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;46203&quot;</span>
        <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">true</span><span class="token" style="color:#586e75">}</span>
       <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;534 street ave&quot;</span><span class="token" style="color:#586e75">,</span>
        <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 5&quot;</span><span class="token" style="color:#586e75">,</span>
        <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Township&quot;</span><span class="token" style="color:#586e75">,</span>
        <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;IN&quot;</span><span class="token" style="color:#586e75">,</span>
        <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;46203&quot;</span>
        <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">false</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;2026 park ave&quot;</span>
        <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 200&quot;</span>
        <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;Town&quot;</span>
        <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;CA&quot;</span>
        <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;86753&quot;</span>
        <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">true</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:address1</span> <span class="token" style="color:#2aa198">&quot;1448 street st&quot;</span>
        <span class="token" style="color:#cb4b16">:address2</span> <span class="token" style="color:#2aa198">&quot;apt 1&quot;</span>
        <span class="token" style="color:#cb4b16">:city</span> <span class="token" style="color:#2aa198">&quot;City&quot;</span>
        <span class="token" style="color:#cb4b16">:state</span> <span class="token" style="color:#2aa198">&quot;WA&quot;</span>
        <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;92456&quot;</span>
        <span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">true</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span>
   <span class="token" style="color:#cb4b16">:visits</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#268bd2">1</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:date</span> <span class="token" style="color:#2aa198">&quot;12-31-1900&quot;</span>
                <span class="token" style="color:#cb4b16">:geo-location</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;46203&quot;</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span>
            <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:date</span> <span class="token" style="color:#2aa198">&quot;1-1-1970&quot;</span>
                <span class="token" style="color:#cb4b16">:geo-location</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;12345&quot;</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span>
               <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:date</span> <span class="token" style="color:#2aa198">&quot;1-1-1970&quot;</span>
                <span class="token" style="color:#cb4b16">:geo-location</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;86753&quot;</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span>
            <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:date</span> <span class="token" style="color:#2aa198">&quot;4-4-4444&quot;</span>
                <span class="token" style="color:#cb4b16">:geo-location</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;54221&quot;</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span>
               <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:date</span> <span class="token" style="color:#2aa198">&quot;4-4-4444&quot;</span>
                <span class="token" style="color:#cb4b16">:geo-location</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">&quot;92456&quot;</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Here we have some much more realistic data than anything we&#x27;ve seen before. We have a map with three top-level keys. These represent data we have gathered from various sources. The first key <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:people</code> is our collection of people with names and ids. The next is the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:addresses</code> of these people, indexed by id for efficient lookup. And finally we have <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:visits</code>, this represents the dates that the users visited our site, again indexed by user-id.</p><p>Here&#x27;s the mock scenario, we&#x27;ve seen suspicious activity on our site and we aren&#x27;t quite sure how to narrow it down. We are going to start our investigation by finding any users who had visits that were not in the same zip as their preferred address. Because of the nature of our application, we happen to know that it is typically used at the preferred location. Once we know the users affected, we need to return their name, id, the date of access, and the zip code that didn&#x27;t match. But I want to show that despite this somewhat complicated scenario, we can easily express this using Meander. Before we get there, the Clojure implementation.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none">
<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> find-non-matching-visits <span class="token" style="color:#586e75">[</span>address visits<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">comp</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">complement</span> #<span class="token" style="color:#586e75">{</span><span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:zip</span> address<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#cb4b16">:geo-location</span><span class="token" style="color:#586e75">)</span> visits<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> find-bad-visits-for-person <span class="token" style="color:#586e75">[</span>addresses visits person<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span>preferred-address <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">first</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">filter</span> <span class="token" style="color:#cb4b16">:preferred</span> addresses<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
        non-matching <span class="token" style="color:#586e75">(</span>find-non-matching-visits preferred-address visits<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">map</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">fn</span> <span class="token" style="color:#586e75">[</span>visit<span class="token" style="color:#586e75">]</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:name</span> person<span class="token" style="color:#586e75">)</span>
                      <span class="token" style="color:#cb4b16">:id</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:id</span> person<span class="token" style="color:#586e75">)</span>
                      <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span>get-in visit <span class="token" style="color:#586e75">[</span><span class="token" style="color:#cb4b16">:geo-location</span> <span class="token" style="color:#cb4b16">:zip</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
                      <span class="token" style="color:#cb4b16">:date</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">:date</span> visit<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
        non-matching<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> find-potential-bad-visits <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:keys</span> <span class="token" style="color:#586e75">[</span>addresses visits people<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">mapcat</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">fn</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:keys</span> <span class="token" style="color:#586e75">[</span>id<span class="token" style="color:#586e75">]</span> <span class="token" style="color:#cb4b16">:as</span> person<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span> 
            <span class="token" style="color:#586e75">(</span>find-bad-visits-for-person 
             <span class="token" style="color:#586e75">(</span>addresses id<span class="token" style="color:#586e75">)</span>
             <span class="token" style="color:#586e75">(</span>visits id<span class="token" style="color:#586e75">)</span> 
             person<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
          people<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>I really wanted to come up with a better implementation. <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">for</code> might have been useful here. If any reader has a better implementation, I&#x27;m happy to replace this one. But honestly, I think no matter what version we went with, it is going to have the features that make this one less than desirable. Just look at how much of this code is about telling the computer what to do. Let&#x27;s look at the Meander version now.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> find-potential-bad-visits <span class="token" style="color:#586e75">[</span>data<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/search data
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:people</span> <span class="token" style="color:#586e75">(</span>m/scan <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> <span class="token" style="color:#2aa198">?id</span> <span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">?name</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>
     <span class="token" style="color:#cb4b16">:addresses</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#2aa198">?id</span> <span class="token" style="color:#586e75">(</span>m/scan <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:preferred</span> <span class="token" style="color:#268bd2">true</span> <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">?zip</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
     <span class="token" style="color:#cb4b16">:visits</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#2aa198">?id</span> <span class="token" style="color:#586e75">(</span>m/scan <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:geo-location</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">and</span> <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">not</span> <span class="token" style="color:#2aa198">?zip</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?bad-zip</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
                           <span class="token" style="color:#cb4b16">:date</span> <span class="token" style="color:#2aa198">?date</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">}</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:name</span> <span class="token" style="color:#2aa198">?name</span>
     <span class="token" style="color:#cb4b16">:id</span> <span class="token" style="color:#2aa198">?id</span>
     <span class="token" style="color:#cb4b16">:zip</span> <span class="token" style="color:#2aa198">?bad-zip</span>
     <span class="token" style="color:#cb4b16">:date</span> <span class="token" style="color:#2aa198">?date</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>This is where Meander shines. <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?id</code> is being used to join across data structures. We can now find an id in people and use that to index into other collections. This allows us to find out everything we need to know about a person easily. We can also search into any collection and match on data at any level. We don&#x27;t need to rely on pulling things out into a higher scope by using let bindings, making helper functions to work on sub-collections, or creating a series of transformations to get at the data we care about. Instead, we declare our data needs and the relationships that need to hold between them.</p><h2>Conclusion</h2><p>I hope that this has been a good introduction to how Meander can be used for practical data transformation problems. In many of these examples, the vanilla Clojure made for pretty good code. But as the data requirements become more complex, we need tools to handle these. While we may be able to accomplish any of these tasks, the understanding of the structure of our code becomes lost. Looking at the example above, we know so much about what the data coming in looks like. Our code mirrors precisely the shape of data we get in.</p><p>Now I do admit, my examples here are a bit contrived. But they are meant to be simple so we don&#x27;t focus on the examples and instead focus on the code. In coming posts, I will explore more directly various ways we can apply Meander for data transformation. Some ideas I have in mind are using Meander with honeysql to turn our data into sql, transforming a collection of data into hiccup for display as html, and using Meander to scrap the web. I&#x27;d also love to do more computer science examples. Using Meander to make a little lisp interpreter, a CEK machine, or basic arithmetic. And yet, Meander goes way beyond all of these things. Meander is about more than practical data manipulation. It is about a new way of programming, a new way of thinking about problems. Hopefully, this introduction will help you to dive in and try it yourself.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/meander-practical</link>
            <guid isPermaLink="false">/meander-practical</guid>
        </item>
        <item>
            <title><![CDATA[Term Rewriting with Meander]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Introduction to Term Rewriting with Meander</h1><p>Meander is heavily inspired by the capabilities of term rewriting languages. But sadly, there aren&#x27;t many introductions to term rewriting aimed at everyday software engineers. Typically introductions to term rewriting immediately dive into discussing mathematical properties or proving theorems. These can be interesting and useful in their own right. But personally, I like to get an intuitive feel for something before diving into a formalism. That is the aim of this post, to help you have a more intuitive understanding of how Term Rewriting works and what it is capable of. This post will not focus on practical uses of meander, if you are interested in that check out <a href="/meander-practical">Meander for Practical Data Transformation</a>.</p><h2>The Basics</h2><p>The goal of Term Rewriting is to take some bit of data and rewrite it into some other bit of data. We accomplish this by writing rules that tell us for a given piece of data what we should turn it into. </p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span>require &#x27;<span class="token" style="color:#586e75">[</span>meander.strategy.epsilon <span class="token" style="color:#cb4b16">:as</span> r<span class="token" style="color:#586e75">]</span>
         &#x27;<span class="token" style="color:#586e75">[</span>meander.epsilon <span class="token" style="color:#cb4b16">:as</span> m<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> x-to-y
  <span class="token" style="color:#586e75">(</span>r/rewrite
   <span class="token" style="color:#cb4b16">:x</span> <span class="token" style="color:#cb4b16">:y</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>x-to-y <span class="token" style="color:#cb4b16">:x</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt; :y</span>
</code></pre><p>Here is the most simple rewrite rule imaginable. If we are given <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:x</code> we turn it into <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:y</code>. In term rewriting, the pattern we are using to match is often called the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">left-hand-side</code> and the data we return is called the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">right-hand-side</code>. So <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:x</code> is our left-hand-side and <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:y</code> is our right-hand-side. The data we pass in to transform is called the reducible-expression (or <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">redex</code> for short).</p><p>Admittedly, this seems almost useless, and it really is with this overly simplistic example. But let&#x27;s take it slow and build it up. </p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> rewrite-some-keywords
  <span class="token" style="color:#586e75">(</span>r/rewrite
   <span class="token" style="color:#cb4b16">:x</span> <span class="token" style="color:#cb4b16">:y</span>
   <span class="token" style="color:#cb4b16">:l</span> <span class="token" style="color:#cb4b16">:q</span>
   <span class="token" style="color:#cb4b16">:r</span> <span class="token" style="color:#cb4b16">:t</span>
   <span class="token" style="color:#cb4b16">:a</span> <span class="token" style="color:#cb4b16">:c</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>rewrite-some-keywords <span class="token" style="color:#cb4b16">:a</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt; :c</span>
</code></pre><p>Here we&#x27;ve extended our rewrite to have multiple rules. Now we can handle more than just <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:x</code>. Of course, this is still really limiting. We definitely can&#x27;t list every single possible input for all of our rules. We need a way to match any input. That is where <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">variables</code> come in.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> match-any-thing
  <span class="token" style="color:#586e75">(</span>r/rewrite
    ?x <span class="token" style="color:#586e75">[</span><span class="token" style="color:#cb4b16">:matched</span> ?x<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>match-any-thing <span class="token" style="color:#cb4b16">:a</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; [:matched :a]</span>
<span class="token" style="color:#586e75">(</span>match-any-thing <span class="token" style="color:#2aa198">&quot;hello&quot;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; [:matched &quot;hello&quot;]</span>
<span class="token" style="color:#586e75">(</span>match-any-thing <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; [:matched 1]</span>
</code></pre><p>Here we added the variable <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?x</code> to our left-hand-side. Variables start with a <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?</code> and match any value. Whatever they match is now accessible on the right-hand-side. So we can match anything with <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?x</code> and then use it in our output. Let&#x27;s see a more interesting example.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> find-x
  <span class="token" style="color:#586e75">(</span>r/rewrite
   <span class="token" style="color:#586e75">[</span>?x<span class="token" style="color:#586e75">]</span> ?x
   <span class="token" style="color:#586e75">[</span>?x ?y<span class="token" style="color:#586e75">]</span> ?x
   <span class="token" style="color:#586e75">[</span>?x ?y ?z<span class="token" style="color:#586e75">]</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>find-x <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 1</span>
<span class="token" style="color:#586e75">(</span>find-x <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 1</span>
<span class="token" style="color:#586e75">(</span>find-x <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 1</span>
</code></pre><p>Here we can see some really simple rules that work on vectors of various sizes. We can use this to extract the first element from each. In this case, since we only care about <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?x</code>, we can actually simplify this code.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> find-x
  <span class="token" style="color:#586e75">(</span>r/rewrite
   <span class="token" style="color:#586e75">[</span>?x<span class="token" style="color:#586e75">]</span> ?x
   <span class="token" style="color:#586e75">[</span>?x _<span class="token" style="color:#586e75">]</span> ?x
   <span class="token" style="color:#586e75">[</span>?x _ _<span class="token" style="color:#586e75">]</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>The <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">_</code> is a wildcard match that matches anything but doesn&#x27;t bind at all. What happens if we try to extend this to work for not just vectors, but just a single number?</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> find-x
  <span class="token" style="color:#586e75">(</span>r/rewrite
   ?x ?x
   <span class="token" style="color:#586e75">[</span>?x<span class="token" style="color:#586e75">]</span> ?x
   <span class="token" style="color:#586e75">[</span>?x _<span class="token" style="color:#586e75">]</span> ?x
   <span class="token" style="color:#586e75">[</span>?x _ _<span class="token" style="color:#586e75">]</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>find-x <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 1</span>
<span class="token" style="color:#586e75">(</span>find-x <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; [1]</span>
</code></pre><p>The order of our rules matters, <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?x</code> matches anything, so we will always get the first match. We could change the order, or we can constrain the match.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> find-x  
  <span class="token" style="color:#586e75">(</span>r/rewrite
   <span class="token" style="color:#586e75">(</span>m/pred number? ?x<span class="token" style="color:#586e75">)</span> ?x 
   <span class="token" style="color:#586e75">[</span>?x<span class="token" style="color:#586e75">]</span> ?x
   <span class="token" style="color:#586e75">[</span>?x _<span class="token" style="color:#586e75">]</span> ?x
   <span class="token" style="color:#586e75">[</span>?x _ _<span class="token" style="color:#586e75">]</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>find-x <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 1</span>
<span class="token" style="color:#586e75">(</span>find-x <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 1</span>
</code></pre><p>Okay, now it works. But many of you are probably thinking &quot;Isn&#x27;t this just pattern matching?&quot;. And in many ways it is. Term Rewriting is a kind of pattern matching. But it doesn&#x27;t stop with simple pattern matching. Term Rewriting is a way to do all computation through pattern matching. To see that, let&#x27;s move beyond the basics.</p><h2>Applying strategies</h2><p>We&#x27;ve seen that with Meander we can do simple rewrites where we match on the left-hand-side and output a right-hand-side. But just being able to do a single rewrite in this way is really limiting. To see this problem let&#x27;s consider a classic example in term rewriting.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition
  <span class="token" style="color:#586e75">(</span>r/rewrite
   <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> ?x <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> ?x
   <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> ?x<span class="token" style="color:#586e75">)</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 3</span>
<span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 3</span>
</code></pre><p>Zero added to anything is just that thing. We can easily express this with term rewriting. But what if we have multiple 0&#x27;s nested?</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; (+ 0 3)</span>

<span class="token" style="color:#586e75">(</span>simplify-addition
 <span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 3</span>
</code></pre><p>As you can see, the first time we apply our rules we do simplify, but not all the way. If we call our rules again, we fully simplify the expression. But how could we express this with term rewriting? We can use what are called <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">strategies</code>. Strategies let us control how our terms are rewritten. Let&#x27;s start with an easy strategy the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">n-times</code> strategy.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-twice
  <span class="token" style="color:#586e75">(</span>r/n-times <span class="token" style="color:#268bd2">2</span> simplify-addition<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>simplify-twice &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 3</span>
</code></pre><p>Strategies wrap our rewriting rules and make them do additional things. In this case, the rewriting will be applied twice. But there are a few problems with the strategy as we&#x27;ve written it. Let&#x27;s slowly discover those problems together and fix them.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span>simplify-twice &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; #meander.epsilon/fail[]</span>
</code></pre><p>Our apply-twice strategy works for things that need to be simplified twice, but not for simple cases. We can fix that by using the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">attempt</code> strategy. It will try to rewrite and if it fails, just return our value.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition
  <span class="token" style="color:#586e75">(</span>r/n-times <span class="token" style="color:#268bd2">2</span>
    <span class="token" style="color:#586e75">(</span>r/attempt
     <span class="token" style="color:#586e75">(</span>r/rewrite
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> ?x <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> ?x
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> ?x<span class="token" style="color:#586e75">)</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 3</span>
<span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 3</span>
<span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; (+ 0 3)</span>
</code></pre><p>Now it works for both. But having it only rewrite twice is a little arbitrary. What we really want to say is to continue applying our rewrite rules until nothing changes. We can do that by using the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">(until =)</code> strategy.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition
  <span class="token" style="color:#586e75">(</span>r/until <span class="token" style="color:#859900">=</span>
    <span class="token" style="color:#586e75">(</span>r/attempt
     <span class="token" style="color:#586e75">(</span>r/rewrite
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> ?x <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> ?x
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> ?x<span class="token" style="color:#586e75">)</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; 3</span>
<span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; (+ 3 (+ 2 0))</span>
</code></pre><p>We can now simplify things no matter how deep they are, but as we can see we didn&#x27;t fully eliminate 0s from all our expressions. Why is that? Well, our pattern only matches things that are in the outermost expression. We don&#x27;t look at all at the sub-expressions. We can fix that by applying another strategy. In this case, we will use the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">bottom-up</code> strategy.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition
  <span class="token" style="color:#586e75">(</span>r/until <span class="token" style="color:#859900">=</span>
    <span class="token" style="color:#586e75">(</span>r/bottom-up
     <span class="token" style="color:#586e75">(</span>r/attempt
      <span class="token" style="color:#586e75">(</span>r/rewrite
       <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> ?x <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> ?x
       <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> ?x<span class="token" style="color:#586e75">)</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>simplify-addition &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#93a1a1">;; (+ 3 2)</span>
</code></pre><p>We have now eliminated all the zeros in our additions no matter where they are in the tree. For the sake of space in our examples, we kept our rules and our strategies together, but these are actually separable. What if we wanted to try the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">top-down</code> strategy with our rules?</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition
  <span class="token" style="color:#586e75">(</span>r/rewrite
   <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> ?x <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> ?x
   <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> ?x<span class="token" style="color:#586e75">)</span> ?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition-bu
  <span class="token" style="color:#586e75">(</span>r/until <span class="token" style="color:#859900">=</span>
    <span class="token" style="color:#586e75">(</span>r/bottom-up
     <span class="token" style="color:#586e75">(</span>r/attempt simplify-addition<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition-td
  <span class="token" style="color:#586e75">(</span>r/until <span class="token" style="color:#859900">=</span>
    <span class="token" style="color:#586e75">(</span>r/top-down
     <span class="token" style="color:#586e75">(</span>r/attempt simplify-addition<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Our rules are completely separate from how we want to apply them. When writing our transformations, we don&#x27;t have to think at all about the context they live in. We just express our simple rules and later we can apply strategies to them. But what if we want to understand what these strategies are doing? After playing around with things, it seems that the top-down strategy and the bottom-up strategy always give us the same result. But what are they doing that is different? We can inspect our strategies at any point by using the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">trace</code> strategy.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition-bu
  <span class="token" style="color:#586e75">(</span>r/until <span class="token" style="color:#859900">=</span>
    <span class="token" style="color:#586e75">(</span>r/trace
     <span class="token" style="color:#586e75">(</span>r/bottom-up
      <span class="token" style="color:#586e75">(</span>r/attempt simplify-addition<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition-td
  <span class="token" style="color:#586e75">(</span>r/until <span class="token" style="color:#859900">=</span>
    <span class="token" style="color:#586e75">(</span>r/trace
     <span class="token" style="color:#586e75">(</span>r/top-down
      <span class="token" style="color:#586e75">(</span>r/attempt simplify-addition<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>So now we have modified our rewrites to trace every time the top-down or bottom-up rules are called. Let&#x27;s try a fairly complicated expression and see what happens.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span>simplify-addition-td &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#93a1a1">;; printed</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20100<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20100<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20100<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20100<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20100<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20100<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>


<span class="token" style="color:#586e75">(</span>simplify-addition-bu &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#93a1a1">;;printed</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20099<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20099<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20099<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_20099<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
</code></pre><p>If we look at the top-down approach, we can see that the top-down strategy actually gets called three times. Once it rewrites quite a bit but leaves in a 0 that needs to be rewritten. Then it gets called again, eliminating all zeros. Finally, it is called and nothing changes. Our bottom-up strategy however is only called twice. But we can actually get more fine-grained than this. We can put trace at any point in our strategies.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> simplify-addition-bu
  <span class="token" style="color:#586e75">(</span>r/until <span class="token" style="color:#859900">=</span>
    <span class="token" style="color:#586e75">(</span>r/bottom-up
     <span class="token" style="color:#586e75">(</span>r/trace
      <span class="token" style="color:#586e75">(</span>r/attempt simplify-addition<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>simplify-addition-bu &#x27;<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#93a1a1">;; printed</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#859900">+</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#859900">+</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#859900">+</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#859900">+</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">0</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:in</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">}</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:id</span> t_27317<span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:out</span> <span class="token" style="color:#268bd2">3</span><span class="token" style="color:#586e75">}</span>
</code></pre><p>Here we moved our trace down outside our <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">attempt</code> strategy. Now we can see the exact order of our bottom-up strategy. Having this sort of visibility into how the process is working is really fantastic.</p><h2>Rewriting as General Computation</h2><p>What have been doing so far is interesting, but it falls short of the true power of term rewriting. Term rewriting is a general programming technique. Using it we can compute absolutely anything that is computable. Let&#x27;s start with a classic example, fibonacci, but to further show general computability, we will make our own numbers instead of relying on Clojure&#x27;s.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> fib-rules
  <span class="token" style="color:#586e75">(</span>r/rewrite

   <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> Z ?n<span class="token" style="color:#586e75">)</span> ?n
   <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> ?n Z<span class="token" style="color:#586e75">)</span> ?n

   <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> ?n <span class="token" style="color:#586e75">(</span>succ ?m<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span>succ ?n<span class="token" style="color:#586e75">)</span> ?m<span class="token" style="color:#586e75">)</span>

   <span class="token" style="color:#586e75">(</span>fib Z<span class="token" style="color:#586e75">)</span> Z
   <span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ Z<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span>succ Z<span class="token" style="color:#586e75">)</span>
   <span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ ?n<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ ?n<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span>fib ?n<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>


<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">def</span> run-fib
  <span class="token" style="color:#586e75">(</span>r/until <span class="token" style="color:#859900">=</span>
    <span class="token" style="color:#586e75">(</span>r/bottom-up
     <span class="token" style="color:#586e75">(</span>r/attempt fib-rules<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">(</span>run-fib &#x27;<span class="token" style="color:#586e75">(</span>fib Z<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
 <span class="token" style="color:#586e75">(</span>run-fib &#x27;<span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ Z<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
 <span class="token" style="color:#586e75">(</span>run-fib &#x27;<span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ Z<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
 <span class="token" style="color:#586e75">(</span>run-fib &#x27;<span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ Z<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
 <span class="token" style="color:#586e75">(</span>run-fib &#x27;<span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ Z<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
 <span class="token" style="color:#586e75">(</span>run-fib &#x27;<span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ Z<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
 <span class="token" style="color:#586e75">(</span>run-fib &#x27;<span class="token" style="color:#586e75">(</span>fib <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ <span class="token" style="color:#586e75">(</span>succ Z<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>

<span class="token" style="color:#93a1a1">;; [Z</span>
<span class="token" style="color:#93a1a1">;;  (succ Z)</span>
<span class="token" style="color:#93a1a1">;;  (succ Z)</span>
<span class="token" style="color:#93a1a1">;;  (succ (succ Z))</span>
<span class="token" style="color:#93a1a1">;;  (succ (succ (succ Z)))</span>
<span class="token" style="color:#93a1a1">;;  (succ (succ (succ (succ (succ Z)))))</span>
<span class="token" style="color:#93a1a1">;;  (succ (succ (succ (succ (succ (succ (succ (succ Z))))))))]</span>
</code></pre><p>If you aren&#x27;t familiar with defining natural numbers via Peano numbers this may be a little bit confusing. But for our purposes all you need to know is that <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">Z</code> means 0 and <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">succ</code> means successor. <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">(succ Z)</code> means 1 <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">(succ (succ Z))</code> means 2 and so on and so forth. Our fibonacci rules start by defining addition for our Peano numbers. Anything added to 0 is zero. Otherwise, we can add two numbers by moving all the <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">succ</code>s to one side until the right hand side equals 0. With those definitions in place, we can define fibonacci, which is basically just the definition of fibonacci. With term rewriting our strategies can enable us to have recursion without directly implementing it. Our rules read like they are recursive. But our rules don&#x27;t call a function. They don&#x27;t cause anything to occur. They just return more data. It is the process of interpretation that makes them recursive.</p><p>In fact, with Meander, we are limited to what the clojure reader can interpret, but in general, with term rewriting, the syntax doesn&#x27;t matter. I wrote things as <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">(fib n)</code> merely as convention. I could have writen <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">(n fib)</code>. There is nothing special about the syntax other than what rules we apply to it. </p><h2>Why Should We Care?</h2><p>Admittedly the example of fibonacci above isn&#x27;t very useful. And of course, if we had a real language, we would never want a number system like that. So why should we care about term rewriting? Term Rewriting offers a powerful yet simple way of viewing programming. It gives us the potential to take the lisp mantra that code is data and data is code much more seriously. How so? First, in lisps functions might be values, but they are opaque. Evaluating a function definition returns you something that you can&#x27;t inspect directly. Something you can&#x27;t directly transform (<code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">#function[]</code> in clojure). With term rewriting, things can just remain data, because we have separated execution from description.</p><p>Not only can our &quot;code&quot; be data more than it can in lisp, but we can actually have our execution as data. Executing a Term Rewriting rule is just taking in data, matching on it, and producing more data. That means all our intermediate values are data. The entire execution of our program now becomes data. Have you ever run your program and had no idea where a certain value came from? Well, imagine if you could just ask your language to pattern match on every intermediate value that contains that value. Or maybe, give me the last 5 steps that led to this value. With Term Rewriting this is entirely possible.</p><p>Term Rewriting also gives us an easy basis for talking about partial programs. Our current programming languages have a problem where if they encounter something they don&#x27;t understand, they just blow up, not telling us anything. Let&#x27;s consider the following program:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">+</span> <span class="token" style="color:#268bd2">3</span> <span class="token" style="color:#268bd2">4</span> <span class="token" style="color:#586e75">(</span>unimplemented!<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>What does the program return? Well as its name is clear, unimplemented is in fact, unimplemented. So most languages will just throw an error. That can be what we want at times. But as people, we can look at that code and tell something else. We know that it will return <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">(+ 7 something)</code>. Why can&#x27;t our languages tell us that? Why can&#x27;t we start writing partial programs and run them continually refining things as we go? Term Rewriting gives us this ability.</p><h2>Term Rewriting as Programming Paradigm</h2><p>Term Rewriting represents a distinct way of programming. It offers us a uniform way of dealing with data. It gives us the ability to think about things as syntactic structures. It offers us a way to truly have code as data, to go beyond the arbitrary distinctions imposed by our languages about what can and cannot be manipulated. It is a fundamental shift in how we view programs. It gives us new perspectives, new ways of thinking about how code executes and what our programs mean.</p><p>Meander isn&#x27;t at that point. But it is the beginning of an exploration into how to get there. In many ways, Meander is a testament to the flexibility of lisps and Clojure in particular. Using Clojure&#x27;s rich data literals and macros we can embed our own language inside it. Yet at the same time, Meander pushes us beyond the way we&#x27;ve traditionally conceived of programming. Maybe functions aren&#x27;t the best abstraction for working with data. Could programming be better if we truly had a way to work with data directly? That is Meander&#x27;s conviction and its chief aim.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/meander-rewriting</link>
            <guid isPermaLink="false">/meander-rewriting</guid>
        </item>
        <item>
            <title><![CDATA[Card Driven Development]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Card Driven Development</h1><p>Every company I&#x27;ve worked for has practiced what I call &quot;Card Driven Development&quot; (CDD). CDD is an umbrella term meant to encompass quite a few different development processes. The name comes from the use &quot;cards&quot; (digital or physical) found in the Scrum and Kanban processes as a means of organizing work, but CDD extends further than these two processes. It encompasses formal or informal processes as long as they have a few things in common.</p><p>CDD is a way of approaching software development that involves a splitting of responsibilities. In CDD, there must be at least two groups, the first, often called &quot;Engineering&quot;, is responsible for technical duties including writing code, maintaining code, and operational concerns like managing servers. The second group, often known as &quot;Product&quot; or informally &quot;the business&quot;, is responsible for researching, detailing, and prioritizing what work needs to be done. Product gives work to Engineering, they prioritize what work will be done next, and they message out the status of the work to various interested parties.</p><p>This split in responsibility means that the day-to-day work accomplished by Engineering and Product looks very different. Engineering, when operating well, is about shipping working software to customers, whereas Product&#x27;s work is an act of delegation. This can often lead engineers to believe that Product does nothing, but this could not be further from the truth. Product&#x27;s days are packed with work. Product&#x27;s role involves being pulled in many directions, they must keep track of the work in progress, while continuously engaging with the various interested parties vying for their attention; attempting to get their party&#x27;s particular needs worked on next. Product&#x27;s work involves status updates, meetings, research, and above all else detailing and prioritizing work for Engineering.</p><h2>The Card</h2><p>This last part is where the Card makes its appearance. The work needed to be done is too large to write down and detail in its entirety. Even if this task could be achieved, it isn&#x27;t desirable because by the time it was written down, the facts on the ground may have changed. So a system of dividing work is adopted. In CDD this system is the card.</p><p>Cards are a place to describe work that needs to be done and in what order it should be done. Cards break work into small chunks, typically focused on functionality that some particular party would like. Cards serve as a meeting point for Product and Engineering. Product writes cards, prioritizes cards, and gives them to Engineering as work that needs to be done. Engineering then works in the order given by product. Sometimes this means taking multiple cards at a time and making a time commitment for their completion (often called a sprint). Other times cards are pulled in one by one as time and resources permit (this process is often referred to as a Kanban-style workflow).</p><p>As described here the card-making process only involves Product. In reality, there is usually a collaboration between Product and Engineering around cards. Typically cards are reviewed and discussed before they ever are handed to an Engineer to be worked on. Some of these cards may be &quot;technical cards&quot;, cards created and owned by Engineering. With the exception of these technical cards though, cards are owned by Product. Product has the final say in the priority of cards and also serves as the &quot;acceptor&quot; for the fact that the work described in cards has been accomplished.</p><p>The above is meant to serve as a neutral description of what is entailed by CDD. I imagine the process as I&#x27;ve described above is familiar to most reading this. CDD is a process that many companies adopt and do so for good reason. But despite the best of intentions by companies that adopt CDD, it is a disastrous process that leads to some of the worst issues plaguing modern software development. I contend that companies that adopt CDD will inevitably exacerbate these issues, leading to engineer dissatisfaction and decreased productivity.</p><h2>A Bit About Creating Software</h2><p>Creating software is a complex task. Features, that may seem on the surface trivial may involve multiple months of effort, minor modifications to an existing process may cause a cascade of required changes across many codebases, and seemingly innocent changes may introduce pernicious bugs. While there are most certainly ways to mitigate these problems, this is the reality the Software Engineer faces. The development of software does not exist in a vacuum, our new code must continue to work with old code, our legacy systems require continual maintenance and the interactions between pieces of our system continue to grow in complexity. </p><p>Any view about how creating software ought to be done needs a realistic picture of the constraints that Software Engineers face. The software creation process at any given time is constrained by all the decisions of past engineers who had a hand in building the software in question. But this set of decisions involves not only all engineers who have worked at the company, but also the authors of the libraries on which the software is built. The design decisions of past engineers provide deep constraints on how much effort a given change will take. The choice of a relational or non-relational datastore limits the sort of data-integrity constraints we can easily enforce, the library we have chosen for our frontend constrains our ability to support things like server-side rendering that may be needed for SSO considerations, and the decision of how to split (or not) our application into services constrains our deployment and delivery strategy, just to name a few examples.</p><h2>The Problem with Card Driven Development</h2><p>Card Driven Development, as I have defined it, is concerned primarily with a division of labor. But with this division of labor comes a division of knowledge. Engineering knows the software systems needed for the business to operate and Product has knowledge of the various interested parties&#x27; desires. In themselves, these divisions aren&#x27;t an issue, but as I hope to show the process of CDD limits the sharing of knowledge across these domains, causing issues for both the software being created and the larger goals of the business.</p><p>What precisely do I mean by CDD limiting knowledge? As I&#x27;m using this term it implies at least two things. First that the knowledge that is shared between Product and Engineering happens at the wrong level and in the wrong order, limiting the usefulness of the knowledge transfer. Second, that the sorts of knowledge shared between Product and Engineering allow neither to accomplish their job as well as they ought. The reciprocal nature of this issue is incredibly important. CDD isn&#x27;t just bad for Engineering, it is bad for Product and bad for the business.</p><h3>Wrong Level, Wrong Order</h3><p>Imagine you are a novice cook looking to tackle a recipe a bit above your skill level. You follow the instructions step by step diligently, spending close to an hour on prepping and cooking the ingredients and as you come to the end of the recipe it says, &quot;To finish the dish, poach an egg and place it on top&quot;. You immediately become frustrated. While the recipe is telling you everything needed to make the dish, you have no idea how to poach an egg and even if you figure it out, poaching takes time and your dish is already complete.</p><p>Unlike our cooking example, CDD gives engineers knowledge at a far too granular level. Cards are about tiny pieces of functionality. They don&#x27;t provide the context needed to place a given piece of functionality into its larger context. This focus on granularity can cause the big picture to be lost. It isn&#x27;t uncommon to implement an entire card based on the details it provided just to find out that it didn&#x27;t actually solve the problem it was intended to. Had the card been written at a higher level, the constraints on what counted as a solution to the problem would have been clearer.</p><p>Not only is the information too granular, but it is also often delivered out of order. It isn&#x27;t uncommon to work on 2 or 3 cards, make great progress, and then once you reach the next card you find out the work you just implemented was wrong. What you learned on card 4 was the information you really needed at the beginning. This new feature or constraint casts all previous work in a different light. The assumptions you made when implementing the others cards are now invalid. This means you have one of two choices, rework the previous work, or write a hack. I think we all know what happens most often.</p><h3>Wrong Sorts of Knowledge</h3><p>Cards detail functional requirements of our software. They are more often than not about the inputs and outputs of our systems. They detail UI components, data requirements, user interactions, etc... And yet these are not what Engineering needs to do its job most effectively. The businesses we create are not about these inputs and outputs. Ultimately as businesses, we are trying to solve problems. Our users face issues that we are providing a service to solve. These users may be our internal customer support, other companies, or consumers, regardless, they have a problem and we are tasked with fixing it.</p><p>For these problems to be fixed software needs to be written by Engineering. How can Engineering know if their software is effective? Or in other words, how can Engineering know if their software solves the users&#x27; problem? By first understanding at a deep level what problem the user is facing. This is truly the fundamental problem with CDD, it distances engineers from the problems they are solving. No longer do engineers know or care deeply about these problems. No longer do they spend their time thinking about these problems and how best to solve them. Instead, they are consumed by details, consumed by sub-optimal answers.</p><p>But this isn&#x27;t just a problem for Engineering. Product has burdened themselves unnecessarily by adopting CDD. Product&#x27;s job is to understand the user, but there is never just one user. Product has to understand all these various users with vastly different needs. This is a hard enough task on its own, but with CDD understanding the users is a small part. Instead, Product must spend their time trying to fit these problems into the system that Engineering has developed. They must figure out a way to address the problems the user is facing in a system that is largely opaque to them. </p><p>The opaque nature of the system that Engineering has built is a constant frustration for Product. Constantly their best attempts at making small changes are thwarted. Even the most reasonable-sounding request gets push back from Engineering. It becomes harder and harder for product to make the changes they are requesting. Ultimately, in CDD Product is being asked to do something nearly impossible, propose changes to a system that is largely invisible to them. Try as they might, knowing the difference between what changes can easily be made to the system and what are hard are completely opaque to Product, and yet their job depends on knowing exactly that.</p><h3>Bad for the Business</h3><p>Engineers who lack understanding of the users&#x27; problems may solve the wrong problems. This might mean shipping a feature that no one uses. It might mean removing some important feature. It may mean leaving out a feature that was sorely needed. All of these problems can drive customers away or prevent a company from gaining more customers. If the users of the system are internal, it may cause inefficiencies that cost the company money and can even affect employee morale.</p><p>If Product has been tasked with designing new features and lacks the knowledge needed to do so effectively, inefficiencies in the development cycle can appear. As Product proposes more changes, estimates grow. More time is spent in meetings discussing changes than actual time implementing them. As development slows, demands for changes continue to grow. Users talking to Product get increasingly frustrated as to why their changes haven&#x27;t made it in. More often than not, this means changes to internal tools are deprioritized leading to inefficiencies and frustrating process that can lead to high turnover in customer support.</p><h2>Strained Relationships and Failure</h2><p>This lack of knowledge on both sides can lead to friction between Product and Engineering. It is incredibly common for companies to have a strained relationship between Engineering and Product. I think many of these issues stem from this confusion of roles. Both sides feel powerless to achieve the ends they have been tasked with. Over time their jobs get harder and harder and it always seems to be the other group&#x27;s fault.</p><p>A strained Product and Engineering relationship can spell the end for a project or even a whole company. More often than not, strained product relationship leads to frustrated engineers. These engineers leave, taking with them their hard-earned knowledge of the system they helped build. As engineers become frustrated, they often become defensive. When asked for estimates they worry about how the estimates might be used and so they pad them. Knowing that anyone can detect if they constantly over-estimate, they slow their work, meeting nearly exactly the estimates they put forward.</p><p>Development time stretches on and on. The system the company has invested so much in grows worse and worse to make changes to. All the original engineers have left. Product is sick and tired of trying to force changes through. Eventually, the business decides to do the big rewrite and the cycle repeats. If we are ever to break this cycle, we must get rid of card-driven development. What I think should replace it is a topic for another post. But whatever the right process is, it must start with an understanding of <a href="/incommunicability">what programming is</a>.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/card-driven-development</link>
            <guid isPermaLink="false">/card-driven-development</guid>
        </item>
        <item>
            <title><![CDATA[Building Meander in Meander]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Building Meander in Meander</h1><p><a href="https://github.com/noprompt/meander/">Meander</a> has been (in my personal opinion) a wonderful success. With meander.epsilon, we can express most of the data transformations we are interested in. There are of course a few rough edges, a few things we&#x27;d change. But as more people have begun to use meander and more people present problems they are tackling with meander, it becomes clear that this approach is working. And yet, there is something that isn&#x27;t working quite the way we&#x27;d like; the implementation of the meander compiler itself.</p><p>This isn&#x27;t meant as a diss on the code. Ultimately the organization of the code is actually really nice. There are clear, defined boundaries, there is a clear separation of functionality, the code itself isn&#x27;t a mess by any standard. Nor is this a diss on the quality of code generated by the meander compiler. There are certainly areas that we could improve, but in general, meander produces code that is fast and small. In all the meander matches we&#x27;ve written, we have never once encountered the &quot;method code too large&quot; error that has plagued complex pattern matches when using libraries like core.match. </p><p>But there is still something not right with the meander.epsilon compiler. As you dive into the code base and try to make modifications, it becomes hard to trace the way data is being transformed. The code is littered with if statements needed to inspect the structure of the data we are getting. Then, we have to pull out all the bits and parts we care about. What data is and isn&#x27;t available at a given point is far from clear. But perhaps even more importantly, the shape of our data is lost. The meander.epsilon compiler is just converting between data structures, we read matches in as data, parse them as an ast, build a matrix-based IR, build a more direct IR, do optimizations, and deduplication, and then generate clojure code (also data). But looking at our compiler all of this is completely opaque, despite our best efforts.</p><h2>meander.zeta</h2><p>In meander.zeta we are taking a different approach. All the details haven&#x27;t been worked out yet, but in this article, I want to share the general approach so that others can understand what we are looking to accomplish. To do that, we are going to build our own mini-meander compiler using meander.epsilon. Our compiler will not be efficient or support many matches. But it will give you a taste of what meander can do, as well as give a taste of how we are using meander to implement itself.</p><p>Before we get started though, let&#x27;s talk about our plan. First to keep our code clear and this article from stretching out forever, we are going to limit our feature set to matching on logic-variables and vectors. For our purposes that should be all we need. Further, we are only going to be implementing the &quot;match&quot; side of meander. Substitution is left as an exercise to the reader. To accomplish all of this clearly, we will start by first implementing a parser. Then taking our AST (abstract syntax tree) produced from our parser, we will implement a simple meander interpreter. Finally, we will show how meander&#x27;s symbolic nature allows us to easily transform this interpreter into a compiler, with minimal changes. Let&#x27;s begin.</p><h2>Parser</h2><p>Our parser is going to mirror the format used by the meander parser. I will deviate a bit, but the general approach will be the same, so you will begin to see a bit of what the internals of meander looks like. But rather than build the parser first, let&#x27;s describe the output we would like from our parser.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">parse</span> &#x27;?x<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt;</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span> <span class="token" style="color:#cb4b16">:symbol</span> &#x27;?x<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">parse</span> &#x27;<span class="token" style="color:#586e75">[</span>?x ?y<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt;</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span>
 <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span> <span class="token" style="color:#cb4b16">:symbol</span> &#x27;?x<span class="token" style="color:#586e75">}</span>
            <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span> <span class="token" style="color:#cb4b16">:symbol</span> &#x27;?y<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span>
</code></pre><p>Here we have two very simple examples of the input and output we expect from our parser. Our goal is to take our pattern and turn it into these nice, unambiguous maps. These maps will always have a <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:tag</code> value and then any other keys they need to record the information our interpreter or compiler might want. So, let&#x27;s start by writing a parser that can only handle logic-variables, then will figure out how to deal with vectors.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> <span class="token" style="color:#859900">parse</span> <span class="token" style="color:#586e75">[</span>expr<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/rewrite expr
    <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">symbol</span> _ <span class="token" style="color:#586e75">(</span>m/re #<span class="token" style="color:#2aa198">&quot;^?.+&quot;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">:as</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span>
     <span class="token" style="color:#cb4b16">:symbol</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">parse</span> &#x27;?x<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt;</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span> <span class="token" style="color:#cb4b16">:symbol</span> &#x27;?x<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">parse</span> &#x27;?y<span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt;</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span> <span class="token" style="color:#cb4b16">:symbol</span> &#x27;?y<span class="token" style="color:#586e75">}</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">parse</span> <span class="token" style="color:#cb4b16">&#x27;y</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt;</span>
<span class="token" style="color:#268bd2">nil</span>
</code></pre><p>This parser is very straightforward. We are taking advantage of meander&#x27;s <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">symbol</code> and <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">re</code> operators to make sure that we get a symbol whose name starts with a <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?</code>. Other than that, we do not match on anything else and so everything else will just return nil. Let&#x27;s start by trying to extend this to vectors.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> <span class="token" style="color:#859900">parse</span> <span class="token" style="color:#586e75">[</span>expr<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/rewrite expr
    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#2aa198">!xs</span> <span class="token" style="color:#859900">..</span>.<span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span>
     <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#2aa198">!xs</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#859900">..</span>.<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span>

    <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">symbol</span> _ <span class="token" style="color:#586e75">(</span>m/re #<span class="token" style="color:#2aa198">&quot;^?.*&quot;</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#cb4b16">:as</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span>
     <span class="token" style="color:#cb4b16">:symbol</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">parse</span> &#x27;<span class="token" style="color:#586e75">[</span>?x ?y<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt;</span>
<span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span>
 <span class="token" style="color:#cb4b16">:sequence</span>
 <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:symbol</span> ?x<span class="token" style="color:#586e75">}</span>
  <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span><span class="token" style="color:#586e75">,</span> <span class="token" style="color:#cb4b16">:symbol</span> ?y<span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">}</span>
</code></pre><p>Here we pull out all the contents of our vector and use <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">m/cata</code> to recursively parse our input. If you have never used cata you can think of it just like recur but for patterns. With that we have written our parser as far as we need to for our purposes.</p><h2>Interpreter</h2><p>Now that we have an ast, we can write a simple interpreter. What our interpreter will do is given an input and a pattern and an environment, we will return an environment with all our logic variables set to some value, or we will return <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">:fail</code>. Rather than try to assemble our interpreter piece by piece, I will begin by showing you the entire thing.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> interpret <span class="token" style="color:#586e75">[</span>expr target env<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/match <span class="token" style="color:#586e75">[</span>expr target env<span class="token" style="color:#586e75">]</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span> <span class="token" style="color:#cb4b16">:symbol</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">contains?</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">=</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">get</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
        <span class="token" style="color:#2aa198">?env</span>
        <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">assoc</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#2aa198">?symbol</span> <span class="token" style="color:#2aa198">?target</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#2aa198">?env</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span>?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span>interpret ?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">)</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span>?x &amp; <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span>interpret <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">}</span>
               <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span>
               <span class="token" style="color:#586e75">(</span>interpret ?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>interpret <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">parse</span> &#x27;<span class="token" style="color:#586e75">[</span>?x ?y<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">]</span> <span class="token" style="color:#586e75">{</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#93a1a1">;; =&gt;</span>
<span class="token" style="color:#586e75">{</span>&#x27;?x <span class="token" style="color:#268bd2">1</span> &#x27;?y <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">}</span>
</code></pre><p>If you&#x27;ve written an interpreter before this shouldn&#x27;t be too surprising. First we handle logic variables by looking them up in the environment. We handle the cases of the logic variable existing in the environment and matching, it existing and not matching, and it not existing. Next we handle some vectors cases. Here we handle the empty case, the single element case, and the case with more than one element. This interpreter does work for the input we&#x27;ve given it. But think about what would happen if we did the same pattern but just passed a single number? We&#x27;d throw an error because we never actually check that our input is a vector. We could just go and add a vector check to all of our vector cases, but that means we will be checking that something is a vector for every single element of our vector. So let&#x27;s try a different approach.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> interpret <span class="token" style="color:#586e75">[</span>expr target env<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/match <span class="token" style="color:#586e75">[</span>expr target env<span class="token" style="color:#586e75">]</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span> <span class="token" style="color:#cb4b16">:symbol</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">contains?</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">=</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">get</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
        <span class="token" style="color:#2aa198">?env</span>
        <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">assoc</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#2aa198">?symbol</span> <span class="token" style="color:#2aa198">?target</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

    <span class="token" style="color:#93a1a1">;; Ensure target is a vector</span>
    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#268bd2">nil</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?sequence</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">vector?</span> <span class="token" style="color:#2aa198">?target</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#586e75">(</span>interpret <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#268bd2">true</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?sequence</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#2aa198">?env</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span>?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span>interpret ?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">)</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#2aa198">?checked</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span>?x &amp; <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span>interpret <span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#2aa198">?checked</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">}</span>
               <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span>
               <span class="token" style="color:#586e75">(</span>interpret ?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Taking advantage of the fact that meander matches are ordered, we added an earlier match that will perform the check for us, and then when we recurse we simply set checked to true. That means, this pattern will no longer match and we can continue with the interpreter as before. There is still a problem with this interpreter that we aren&#x27;t going to fix in this post, it does not check the size of the vector. For our purposes, doing this would be fairly easy, we check the size of <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?sequence</code> and ensure target has the same size. But what would we do if we added repeats (e.g. <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">...</code>, <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">..1</code> etc)? For now, we will leave this off, but this might be a good exercise for thinking about on your own.</p><p>Now that we have a working interpreter, let&#x27;s look at how we can make this a compiler. Doing so with meander will actually be suprisingly easy.</p><h2>Compiler</h2><p>Our transition from interpreter to compiler will be simpler than any I have seen before. The translation is basically mechanical. Here is our first version of our compiler. </p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defn</span> compile <span class="token" style="color:#586e75">[</span>expr target env<span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span>m/rewrite <span class="token" style="color:#586e75">[</span>expr target env<span class="token" style="color:#586e75">]</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:logic-variable</span> <span class="token" style="color:#cb4b16">:symbol</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">contains?</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">&#x27;quote</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">=</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">get</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">&#x27;quote</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
        <span class="token" style="color:#2aa198">?env</span>
        <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">assoc</span> <span class="token" style="color:#2aa198">?env</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#cb4b16">&#x27;quote</span> <span class="token" style="color:#2aa198">?symbol</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?target</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

    <span class="token" style="color:#93a1a1">;; Ensure target is a vector</span>
    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#268bd2">nil</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?sequence</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">vector?</span> <span class="token" style="color:#2aa198">?target</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#268bd2">true</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?sequence</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
      <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#2aa198">?env</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span>?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#586e75">[</span>?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>

    <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#2aa198">?checked</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span>?x &amp; <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#2aa198">?checked</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">}</span>
             <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span>
             <span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#586e75">[</span>?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>At first glance, it might be quite hard to spot the difference. There are only a few differences here. First and most crucially is that we have changed from <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap"> m/match</code> to <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">m/rewrite</code>. So now instead of our right-hand side being code that will be immediately run, it is actually data that we are outputting, in this case, that data is code. Secondly, we have quoted some of our symbols. Because we will ultimately be outputting this code in a macro and looking up symbols in an environment, they need to be quoted. Finally we have changed from clojure recursive function calls to using meanders recursion operator <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">m/cata</code>. These are our only real changes and given that, we can now make a macro for matching that will compile our pattern.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">defmacro</span> match <span class="token" style="color:#586e75">[</span>target expr<span class="token" style="color:#586e75">]</span>
    <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span>target_sym <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">gensym</span> <span class="token" style="color:#2aa198">&quot;target_&quot;</span><span class="token" style="color:#586e75">)</span>
          env_sym <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">gensym</span> <span class="token" style="color:#2aa198">&quot;env_&quot;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
      `<span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span>~target_sym ~target
             ~env_sym <span class="token" style="color:#586e75">{</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span>
         ~<span class="token" style="color:#586e75">(</span>compile <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">parse</span> expr<span class="token" style="color:#586e75">)</span> target_sym env_sym<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>

<span class="token" style="color:#586e75">(</span>match <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">]</span> <span class="token" style="color:#586e75">[</span>?x ?y ?x<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt; {?x 1 ?y 2}</span>
<span class="token" style="color:#586e75">(</span>match <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">2</span><span class="token" style="color:#586e75">]</span> <span class="token" style="color:#586e75">[</span>?x ?y ?x<span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
<span class="token" style="color:#93a1a1">;; =&gt; :fail</span>
</code></pre><p>No longer is there a runtime cost to parsing our pattern and then interpretive overhead for crawling through the ast deciding what code to run. All of this happens in our macroexpansion. But there is one small problem. If we look at the code generated by this compiler, we will see that it is rather repetitive and long for what it does. This occurs because of the following clause above:</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#2aa198">?checked</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span>?x &amp; <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
<span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#2aa198">?checked</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">}</span>
         <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span>
         <span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#586e75">[</span>?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Line 4 here is the culprit for our explosion of code. Ultimately our compilation returns us an expression that returns an environment. We build up this environment as we go through our vector. Line 4 allows us to do exactly that, expand into some code that will update our environment. But it does this over and over again. As we continue our compilation our <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?env</code> becomes more and more branching code. Luckily there is a pretty simple fix for this.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">and</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#2aa198">?checked</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#586e75">(</span>?x &amp; <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">}</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span>
       <span class="token" style="color:#586e75">(</span>m/<span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#2aa198">?env-sym</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">gensym</span> <span class="token" style="color:#2aa198">&quot;_env_&quot;</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
     <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span> <span class="token" style="color:#586e75">[</span><span class="token" style="color:#2aa198">?env-sym</span> <span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#586e75">[</span>?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#2aa198">?env</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
       <span class="token" style="color:#586e75">(</span>m/cata <span class="token" style="color:#586e75">[</span><span class="token" style="color:#586e75">{</span><span class="token" style="color:#cb4b16">:tag</span> <span class="token" style="color:#cb4b16">:vector</span> <span class="token" style="color:#cb4b16">:checked</span> <span class="token" style="color:#2aa198">?checked</span> <span class="token" style="color:#cb4b16">:sequence</span> <span class="token" style="color:#2aa198">?rest</span><span class="token" style="color:#586e75">}</span>
                <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> <span class="token" style="color:#2aa198">?target</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span>
                <span class="token" style="color:#2aa198">?env-sym</span><span class="token" style="color:#586e75">]</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Here is our updated code that no longer creates a huge compilation output. Rather than directly updating our <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?env</code> by embedding more and more code. We make a new symbol that will store our environment and pass that down through our recursion. Now that we have solved that problem we end up with some fairly reasonable generated code.</p><pre style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:1em;margin:.5em 0;overflow:auto;border-radius:0.3em;background-color:#fff"><code style="color:#657b83;font-family:Consolas, Monaco, &#x27;Andale Mono&#x27;, &#x27;Ubuntu Mono&#x27;, monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none"><span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span>
  <span class="token" style="color:#586e75">[</span>target_19362 <span class="token" style="color:#586e75">[</span><span class="token" style="color:#268bd2">1</span> <span class="token" style="color:#268bd2">2</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">]</span> env_19363 <span class="token" style="color:#586e75">{</span><span class="token" style="color:#586e75">}</span><span class="token" style="color:#586e75">]</span>
  <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">vector?</span> target_19362<span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#586e75">(</span>let*
      <span class="token" style="color:#586e75">[</span>_env_19364
       <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">contains?</span> env_19363 &#x27;?x<span class="token" style="color:#586e75">)</span>
         <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">=</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> target_19362 <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">get</span> env_19363 &#x27;?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
           env_19363
           <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span>
         <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">assoc</span> env_19363 &#x27;?x <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> target_19362 <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
      <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">let</span>
        <span class="token" style="color:#586e75">[</span>_env_19365
         <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">contains?</span> _env_19364 &#x27;?y<span class="token" style="color:#586e75">)</span>
           <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">=</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> target_19362 <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">get</span> _env_19364 &#x27;?y<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
             _env_19364
             <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span>
           <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">assoc</span> _env_19364 &#x27;?y <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> target_19362 <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">]</span>
        <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">contains?</span> _env_19365 &#x27;?x<span class="token" style="color:#586e75">)</span>
          <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">if</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">=</span>
                <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> target_19362 <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span>
                <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">get</span> _env_19365 &#x27;?x<span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
            _env_19365
            <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span>
          <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">assoc</span>
            _env_19365
            &#x27;?x
            <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">nth</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> <span class="token" style="color:#586e75">(</span><span class="token" style="color:#859900">subvec</span> target_19362 <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">1</span><span class="token" style="color:#586e75">)</span> <span class="token" style="color:#268bd2">0</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
    <span class="token" style="color:#cb4b16">:fail</span><span class="token" style="color:#586e75">)</span><span class="token" style="color:#586e75">)</span>
</code></pre><p>Admittedly this is still quite a bit of code for what we are doing. If you look at it for even a moment you can see some issues. We definitely run nth and subvec entirely too many times. But once we look back at code it becomes pretty obvious that the gensym trick we used before could easy solve that problem. But there is also something still a bit unsatisfying about this generated code. Shouldn&#x27;t it just be simpler? We know that <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?y</code> is only assigned once so why check if it is in the environment or not yet? We also know that the first thing we match on <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?x</code> will always succeed. Why are we checking there as well? For the case we are looking at now, we know that our input is a vector and in fact, we know exactly what our output should be at compile because we were passed a literal!</p><p>These sorts of optimizations are completely possible with this framework. We don&#x27;t have the space to fully explore them, but I will just give a general flavor. What if during compile time we also kept a compile-time env of all the things we know? So we know that our input is a vector, so why check that at run time? We know exactly which logic-variables have been bound or not, so <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">?x</code> can just be directly assigned to <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">(nth ?target 0)</code> right away. Hopefully, you can see that there is nothing about this approach that stops us from making these sorts of optimizations in the future.</p><h2>Conclusion</h2><p>I hope that from this post you learned how meander can be incredibly useful when building out a compiler in clojure. Its direct, symbolic, pattern matching approach simplifies a great deal of what goes into writing a compiler for your own customer dsl. It gives you clear and concise code that lets you reason about your cases. As we&#x27;ve built out zeta we&#x27;ve found meander&#x27;s structured approach to help us understand our code and give us a clear sense of what to do next. Give this technique a try the next time you have a dsl in mind. Why settle for an interpreter when meander makes it this easy to write a compiler?</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/building-meander-in-meander</link>
            <guid isPermaLink="false">/building-meander-in-meander</guid>
        </item>
        <item>
            <title><![CDATA[Conceptual Engineering]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Conceptual Engineering</h1><p>Naming things is one of the hardest things to do in software. Why? Is it because all the names have been taken? Is it because we are trying to get at some essence that our words need to capture? (Like some sort of fantasy magic system.) Perhaps at times, we feel both of these things. But I think that the difficulties we feel naming things stem from an unexpressed anxiety. Deep down we understand that naming is more than assigning a word to a value. When we are naming things, we aren&#x27;t just deciding what something is, instead we are asking the question of what something should be.</p><p>Taking this normative stance, this view that we aren&#x27;t merely trying to explain concepts, but trying to ask the question of what our concepts ought to be, is called <a href="https://www.amazon.com/Fixing-Language-Essay-Conceptual-Engineering/dp/0198814712">Conceptual Engineering</a>. Conceptual Engineering here should be understood to include both working to change the meaning of existing concepts (re-engineering) and creating new concepts for a given purpose (de novo engineering). Naming things is hard because in doing so, we know deep down that we are advocating for this concept. We are putting our weight behind this new concept or in the redefinition (expansion or contraction) of an existing concept. This is a heavy burden to carry.</p><h2>Carrying the Burden</h2><p>Code we call over-abstracted has often failed us by not carrying this burden well. But sometimes, we are also asking too much of this code. Concepts extend past their concrete uses. Our concept of justice for instance extends not only to concrete instances that have occurred but to hypotheticals. So too the concepts in our programs extend beyond the ways in which we have in fact employed them. Expecting code to fully define a concept can lead to frustration. Instead, we have to accept our active role in understanding a program.</p><p>Given this underdetermination of code in defining the bounds of our concepts, what should we do? This depends on the circumstances we find ourselves in. Are we creators of these concepts, or consumers of them? As creators, our work is by no means easy but straightforward. We are responsible for explaining our concept to others, for persuading others to adopt our approach and to listen and consider feedback, refining our concepts as necessary. We are also responsible for considering if/when our concept has overstayed its welcome; when it is time to rid ourselves of this concept. In other words, we should take full responsibility for this concept.</p><p>This notion of responsibility is incredibly important. Our concepts, if used, have effects on others. They can enable, or constrain, they can free or restrict, they can bring joy or pain. Responsibility here doesn&#x27;t mean that all reactions people have towards our concepts are our fault. Perhaps people have taken our concepts and misused or abused them. But it does mean that we ought to consider closely the potential consequences of our ideas. It further suggests that we need to consider how we will receive feedback about the effects our concepts have had on others. Here it might be useful to think about the enterprise architect whose position is to make decisions around concepts for others, impose them, and yet never have to live with their effects.</p><h3>Consuming Concepts</h3><p>Being the consumer of a concept is often much harder than the creator. As creators we have certain leeway, we know the boundaries, we know where edges are vague and where they are exact. We are intimately familiar with our concepts. As consumers, we are not affording these luxuries. Instead, we are encountering a concept and trying to employ it to meet our purposes, often not knowing if this is or isn&#x27;t a good idea.</p><p>Understanding of the norms of the person/community that has created this concept can be incredibly important for successful deployment. Does this concept have a canonical definition? Are there &quot;laws&quot; that apply the concept? What is the conceptual background from which this concept was born? Is there a family of related concepts to which this concept belongs? These sorts of questions will help us ensure we do not misuse the concept.</p><p>Given all these constraints, how to proceed is far from straightforward and often requires careful consideration and a good amount of taste. What do we do when we find a mismatch between our purpose and the current bounds of a concept? Should we choose some different existing concept, create a wholly new concept, work to extend the bounds of the concept, or change our purpose? Each of these responses (and more besides) can be the correct move to take. When the mismatch between our purposes and our candidate concepts is serious and irreconcilable, it is often the correct course of action to search for a different existing concept. But knowing when something is irreconcilable is the trick.</p><h4>Responding to Change</h4><p>As for our other options, we have briefly discussed creating above so we won&#x27;t add more here. That leaves expansion of the concept and revising of our purposes. Let&#x27;s begin with the latter. Changing our purposes seems like a rather odd decision to make in light of finding a mismatch between our purposes and some existing concept. Yet, it can often be the right move if we realize that our purpose wasn&#x27;t independently chosen, but was actually chosen in part because of our misunderstanding of the concept at hand. Imagine we are looking to change some software to meet a business need. We decide to split some part into two by applying a given existing concept in our codebase. So, our immediate purpose is to split something, that was unified, into two parts, but why did we choose to do this? Because of our understanding of the codebase, including our understanding of the concept. When we discover the mismatch, we ought to abandon our immediate purpose and keep in mind our ultimate purpose here, meeting the business need.</p><p>This process of updating our purposes as our understanding of concepts expands is incredibly important. But so too, is it important to consider the expansion of our concepts as our purposes change. Our concepts are under-determined by their instances, but more than that their boundaries are fuzzy in many dimensions. Over time we ought to reconsider these edges in light of our present purposes and knowledge. Introducing new concepts is an expensive task; expanding an existing one can be advantageous. When extending an existing concept, we can rely on existing ideas about the concept to help us transfer knowledge to our new extension making the learning curve much less steep. A fantastic example of this is the way in which video game level design can help us discover a new use for an old mechanic that we never had considered before.</p><h2>Learning from Others</h2><p>The framework here is rather abstract, and yet I doubt unfamiliar to programmers who have found themselves working in codebases developed by many people over a long period of time. A major part of programming is not just the writing of code, but the understanding, creating, and modifying of concepts. We often find ourselves frustrated in codebases where the various dimensions of concepts have not been properly attended to.</p><p>There is more to be said about many of the things mentioned here. For example, how can we understand a concept by reading code and whatever documentation might exist when these things undetermined the concept at hand? How can understanding the norms of a community or the intentions of an author help us here? How can we be sure we are doing justice to a concept in our extension of it? All of these questions and more deserve to be explored. The first step to doing so is to recognize Conceptual Engineering as a crucial part of what we do when engineering a codebase. Creating a codebase is not merely the creation of a bunch of textual artifacts. The norms and intentions we impose on this text are a crucial part of it. The concepts we create, reuse, or modify are incredibly important. If we want to be better programmers, we need to attend to our concepts and consider the question, what should this concept be.</p><p>Most importantly though, we aren&#x27;t in this alone. While our purposes may be particular to our craft, the process is not. We can learn from the philosophers who have explored <a href="https://www.amazon.com/Fixing-Language-Essay-Conceptual-Engineering/dp/0198814712">Conceptual Engineering</a> directly. But we can also share our own experiences, helping to bring our own perspective out into the broader world.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/conceptual-engineering</link>
            <guid isPermaLink="false">/conceptual-engineering</guid>
        </item>
        <item>
            <title><![CDATA[Conceptual Preservation]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Conceptual Preservation</h1><p>In the <a href="/conceptual-engineering">last post</a>, I mentioned how we ought to learn from philosophers who have already explored these notions of Conceptual Engineering. Here we will do exactly that by focusing on the work by philosopher Matthew Lindauer <a href="https://onlinelibrary.wiley.com/doi/abs/10.1111/rati.12280">Conceptual Engineering as Concept Preservation</a>. Despite the title, Lindauer is not arguing that conceptual engineering is merely concept preservation, but rather that concept preservation is an important aspect of Conceptual Engineering. In fact, Lindauer&#x27;s paper focuses on concept preservation because as he sees it, it may be the easiest or clearest case of conceptual engineering. </p><p>Lindauer brings up concept preservation as a way to combat some constraints that some philosophers have placed on Conceptual Engineering. Most notably, Herman Cappelen has claimed that we don&#x27;t really know how concepts change over time (Inscrutability), nor can we control how they change over time (Lack of Control). Lindauer wants to suggest that Inscrutability and Lack of Control are much less of a concern when it comes to concept preservation than to re-engineering and de novo engineering efforts. For this article, we won&#x27;t dive into his argument here, but keeping this as background is important as we think about conceptual preservation as applied to our programming practice.</p><h2>Why Preserve?</h2><p>Conceptual Engineering involves taking a normative stance, asking what our concepts ought to be, rather than what they are. Frequently we find concepts that are deficient in some regard and we aim to fix them or, to use the term of the art, to ameliorate them. But what if our concepts are good? What if we have found a concept that we think is beneficial to keep? Are we done with our conceptual engineering work? Not by any means. Over time semantic drift is inevitable if our words and concepts aren&#x27;t protected and preserved.</p><p>As programmers, we tend to think that our responsibility is to write clear, clean code. If we do this, others will be able to understand our ideas and the codebase will be properly maintainable. Yet, this never seems to happen in practice. As others begin to contribute to our codebase our concepts become lost. No longer do our interfaces mean what they once meant. No longer do our concepts drive changes in the codebase. Instead, people approach our codebase with entirely different preconceived notions and ascribe a new meaning to our concepts. This meaning can start to catch on and now we have two different groups with two different conceptions of the same term. These competing conceptions wreak havoc on our codebase.</p><p>We must work hard to preserve the concepts that matter. We must get them in others&#x27; heads, we must teach others to act correctly in light of these concepts. A failure to preserve concepts can lead to undesirable effects. Think about how Alan Kay feels about the new understanding of Object Oriented Programming. Think about the way in which Agile has changed from something intended to help programmers, to something intended to micro-manage them. As programmers, we must expand our notion of what is our responsibility. We must work hard to preserve our good concepts and change our bad ones.</p><h2>Easy Fixes That Don&#x27;t Work</h2><p>There are two solutions that might come to mind on ensuring concept preservation that I want to argue are dead-ends. First is the idea of self-documenting code, code that by its very nature ought to make our concepts clear. The second is actual documentation, whether that be in the form of docstrings, long-form docs, architecture decision records, or any other format. Neither of these initiatives is enough to secure our concepts. To make this result a bit less surprising, consider the conceptual drift of English words. Does a dictionary prevent drift from occurring?</p><p>Let&#x27;s tackle these in turn and show why they are insufficient. First, self-documenting code can definitely be a good goal. Writing clear variable and function names is fantastic and can certainly aid in comprehension. But no matter how clear our code is, it does not capture our concept completely. Our code underdetermines our concept. No matter what structure we give to our code, there will be multiple concepts of the code that are compatible with it. This is especially true at all the points of our code we have intentionally made extensible. Extensible code necessarily allows our concepts to be open to drift over time, this can be very good.</p><p>What about documentation proper? Of course, our code underdetermines our concepts. That is why we document it, describe background, talk about edge cases, discuss possible future extensions. It could be argued that our concepts are still undetermined, by the documentation, but rather than do that let&#x27;s take a different tack. Preserving a concept isn&#x27;t merely to write it down, it is ensuring that people who utilize this concept have in mind the same concept as what you intended. Further than that, it is that their actions are consistent with that conception. </p><p>Imagine a codebase that follows the MVC pattern. Let&#x27;s assume that the codebase is heavily documented and has canonical definitions of Model, View, and Controller. There are two ways in which the concepts here can drift. First, a team member may have misunderstood some concepts (say some distinction between View and Controller). When teaching these concepts to a junior engineer, they explain them incorrectly. This incorrect understanding spreads and makes its way to the whole team. In this group, our conception has changed despite our existing documentation. In fact, at some point, someone might even go and update the documentation with this new &quot;correct&quot; understanding. </p><p>But concept preservation can fail even if no one has a different conception. Imagine the same codebase above, but this time all team members have internalized the same conception. If you asked them to explain MVC they&#x27;d give you the same explanations. But there is a team member who constantly makes the mistake of putting the wrong code in the wrong place. This isn&#x27;t because of some bad conception, just a simple mistake. Over time others begin to follow this example as they create new code. This way of organizing code becomes habit. Here, our internalized concept hasn&#x27;t changed, and yet our practice reveals an inconsistency. We have in our actions allowed conceptual drift to occur.</p><h2>Practices for Preserving</h2><p>To be clear, writing clean code and good documentation are good practices to help with concept preservation. They just aren&#x27;t sufficient. Nor will they be as effective as they could be if we don&#x27;t consciously think about them as serving that purpose. The same applies to other practices. Code review is a fantastic place to help prevent conceptual drift. But many times it becomes about style over substance. Pair programming is a great way to detect conceptual drift, it allows you to go beyond the code artifact and actually investigate people&#x27;s statements of their beliefs.</p><p>I&#x27;d imagine right now you can think of a number of practices that can be used here. Diagrams, presentations, glossaries, in general, any presentation or explanation of our concepts can help us with preservation. But I want to stress that none of these things exhaust our concepts. Our concepts are <a href="/incommunicability">in-extricably bound up in human-beings</a> themselves. To be in possession of a concept is not merely to be able to repeat it. It is to be able to act in certain ways, it is to be able to apply the concept in a number of different contexts. It is to be able to understand how the concept bares to counterfactual situations.</p><p>In other words, ensuring that others know facts about our concept is not enough to preserve it. This is a mistake software architects often make. An architect may give a presentation on the desired system architecture, they may write extensive documentation, ensure each team member can explain the architecture, and yet find that after the work has begun the system is entirely different from planned. Why is this? First, it may be that despite a person&#x27;s ability to articulate the infrastructure they do not have that deeper knowledge of how to make it reality. But it may also be that the architect has not done their job of convincing others.</p><h2>Persuade or Don&#x27;t</h2><p>Preserving our concepts requires persuasion. Merely building a big codebase of &quot;best practices&quot; or creating standard boilerplate for new projects does not actually get these concepts into other heads and help them live them out in their actions. Other engineers may disagree (and perhaps rightly so) with your conceptions. These engineers may intentionally cause these concepts to drift, twisting them until they fit the shape they were looking for. This is the inevitable outcome of forced concepts.</p><p>If we want to practice conceptual preservation, we must ask ourselves if our concepts are worth preserving. We must ask ourselves if others deem them to be so. We cannot preserve our concepts by fiat. No amount of power can keep a concept in place. So, if conceptual preservation is important to good codebases, we may want to reconsider our practices. Are architects a good solution to ensure quality? Is the blessed infrastructure team that imposes concepts a good idea? Perhaps not.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/conceptual-preservation</link>
            <guid isPermaLink="false">/conceptual-preservation</guid>
        </item>
        <item>
            <title><![CDATA[CDD and the Non-Linearity of Discovery]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>CDD and the Non-Linearity of Discovery</h1><p>I have written previously about how Card Driven Development is extremely detrimental to the development process. In that essay I pegged the problem on CDDs lack of proper knowledge sharing and its incorrect splitting of responsibility. Today I want to focus on a different attribute of CDD that has been bothering me lately. This is the start of me trying to deliver on the promissory note I left at the end of the last essay. If we are to replace CDD we must start with an understanding of what programming is. That is our starting point today. Programming is theory building, does CDD help us build theories?</p><p>Perhaps my last essay could be seen as a bit of a caricature. I don’t think it is, I have in fact seen this process play out in practice. But let’s assume I am wrong. Maybe CDD isn’t disasterous. Maybe I gave too much credit to a process for creating such turmoil. What then would the problem with CDD be? If you don’t see the social problems of CDD that I do why should you not use it?</p><h2>Theory Building and  the Non-Linearity of Discovery</h2><p>Theory Building is an activity of trying to take information about the world and it put it to some particular use. Sherlock Holmes works to build his theories to apprehend criminals. Someone decorating a home builds their theory so that they might make their home cozy, habitable, and enjoyable to live in. A software engineer builds their theory to enable them to solve the problems at hand, not only the problems of today but the problems that will arise tomorrow.</p><p>Consider an instance of complex theory building, how does it proceed? Does Sherlock Holmes proceed from clue to clue, following a linear path to apprehension of the criminal? No, the investigation is full of false starts, of reimaginings, of unexpected twists. But what is most important are Holmes&#x27;s thoughts on the matter. Holmes&#x27;s theory involves learning lessons and responding to them in unusual, particular ways. The process of learning and responding is important to his investigation. If Holmes merely gathered the data, brought it to the police and let them decide his next steps, would he have been as effective?</p><p>The same is true for all theoretical investigations. These investigations give us embodied knowledge. The fact that <em>we</em> worked out the theory is an important aspect of its creation. We had to go through this process of discover, we had to have the false starts, without them we would not have created the same theory.</p><h2>CDD and its Incentives for Linearity</h2><p>On the surface it might seem like CDD should allow for this non-linear process. CDD is common in agile circles where small iterations, retrospectives, and course corrections are advocated. Isn’t agile explictly a response to methodologies like waterfall that didn’t allow for non-linearity? In one sense of the term, yes, agile does not assume linearity. It accepts that you cannot know the destination from the beginning. But remember, the question is about CDD and the non-linearity of discover, not agile and planning non-linearity.</p><p>CDD by its splitting of responsibility between two separate groups, product and engineering, makes using the results of discovery incredibly difficult. What is crucially missing is the allowance for discovery to take center stage when it comes to planning. As engineers work to build a theory (by programming) their discoveries must be incorporated into the plan. But what mechanism is available in CDD for doing so? Well, the primary mechanism is the card. This is the communication tool of choice, it is the pre-requisite for getting work sanctioned.</p><p>But here is where the problem starts. The card cannot serve the task of feedback that it has been tasked with. It is inadequate for a few reasons. First, the time horizon for feedback to be incorporated and for course correction to occur is too long. As engineers are programming, they might find that their theory was incorrect, that the work they had planned to do is no longer the correct choice. What should they do? Well, given CDD the pressure is to forge ahead and file a card for future consideration. But often the correct answer is to stop the work you planned and instead go learn, go develop your theory better so you know the correct moves going forward.</p><p>The card also fails to serve as a proper medium for conveying the information it needs to about this discovery process. First, cards are factual pieces of proposed works. They often take the form of a user story along with acceptance criteria. But this is not what is needed. Because CDD has split the responsibility for deciding what work is to be performed between product and engineering, what the engineer now has to do is convince product that what they have discovered is the truth. They need to help product understand their theory.</p><p>Finally, the card fails because it assumes that all the work to be done has a deliverable. The process of discovery is however not like this. When working to build a theory much of the work we do has no direct outcome. We make guesses that turn out the be wrong. We pursue paths that are dead ends. But this work was not useless. If programming is theory building and the primary output is knowledge rather than a build artifact or source code, then the engineer learning new things is the best possible outcome.</p><h2>Making CDD Work</h2><p>In the previous section, I have ignored some of the nuances that occur in the CDD process that might make it seem I am not being fair, let me address those. First, is it true that engineers are not given the flexibility to course correct without creating a card? Well, if the card is written the way many advocates of CDD recommend, it would seem no. CDD advocates often say that a card should be about detailing a concrete customer problem, rather than a particular solution. It is up to the team to determine how best to solve this problem.</p><p>Here we can say a few things. First, it is readily admitted by most parties that achieving this goal is something must companies struggle with. So CDD as it is practiced, rather than in its ideal form still runs into this issue quite a bit. But we can go further than this. What problems make sense to tackle, what problems are meaningful depends on the theory we have. How many times have we done work where we solved a particular problem, and solved it well, only to find out our customers didn’t use it? Many times, our customers themselves told us about this problem, will even admit it solves the problem as originally stated, but it turns out they were wrong about their needs. Setting forth a problem constrains our theories, if in the process of discovery we come up with a new theory that sets us on a new course with new problems, what are we do to given CDD?</p><p>Next, I have acted as if the card is the only medium of communication available. If we view any guide on how to practice a CDD process, we will find this isn’t accurate. The card is a starting point, it precedes the conversation. Planning is not about taking the card as given, it is about discussing the card and coming to an agreement as a team on the plan to move forward. And yet still this isn’t enough to handle the discovery process. First, the card frames the discussion as does the planning meeting. The goal is to come to a decision for action, not to contemplate a theory. But even if this isn’t a barrier, the card won’t be adequate, because the knowledge that has been gained by the engineer might not be expressible for them. We can know all sorts of things we can’t express. We can even teach others those things we cannot express. But the card is not the medium for doing so.</p><p>Finally there are all sorts of different types of cards. What it might seem I am describing is a CDD process without the Spike card. The spike card is purpose built for the discovery process. It is a time-boxed card made for discover where the deliverable is the findings that the spike uncovered. And yet, this isn’t adequate. The discover process is not a phase, it is not a time-boxed part of the process, it just is the process. If programming is theory building, then what has been relegated to a “spike” is really the main function we are performing, with code as a side-effect. But CDD get this exactly backwards.</p><h2>What Does This Process Look Like Without CDD?</h2><p>It might seem like am saying that engineers ought to just spend all their time thinking, never committing to any plan, never taking actions toward concrete goals. I can certainly understand that reaction. CDD is meant to keep engineers grounded and to hold them accountable. We all have seen engineering teams who seemingly twiddle their thumbs all day, working and reworking things to no end, never delivering anything of value.</p><p>Getting rid of CDD is not getting rid of accountability, nor is it getting rid of progress. It is about moving the decision making process closer to those who have to execute on these decisions. It is about accepting that knowledge matters when we need to make be sure we make the right decisions. It is about accepting that we need non-linear processes to discover what we ought to be working on.</p><p>Our products today are technology. They are composed of bits. Why then should the “product” team not be experts in technology? How can they make the right decisions for the product if they don’t truly understand it at the core, fundamental level? At the same time, how can engineers be expected to make the right decisions if they aren’t given the data they need and allowed to build the theory regardless of what path reality pushes them towards?</p><p>CDD’s push towards linearity is what causes this feeling that we can never accomplish anything in software. It is why year after year it seems that customer needs aren’t being met. Over and over again CDD forces us down a linear path to dead-ends. It prevents feedback mechanisms from operating as they should. If we are to make engineering more productive and help engineers have a better understand of the problems they truly need to solve, we must rid ourselves of CDD.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/cdd-non-linear</link>
            <guid isPermaLink="false">/cdd-non-linear</guid>
        </item>
        <item>
            <title><![CDATA[Towards Aesthetic Elements of Programming]]></title>
            <description><![CDATA[<div style="margin:0 auto;max-width:700px"><div style="position:relative"><div style="position:absolute;right:0;top:0"><a style="text-decoration:none" href="/"><h1 style="color:#999">Jimmy Miller</h1></a></div></div><div style="padding-top:70px"><h1>Towards Aesthetics Elements of Programming</h1><p>Programming styles are immediately recognizable. And yet, the elements that contribute to these styles remain unnamed. What is it that separates the classic Scheme style of programming from a modern OO java style of programming? It is not the language. It is possible to write scheme, javascript, or whatever in the style of a modern OO java program. Nor is it just the paradigm, it isn’t as if all OO programs have the same style. So what precisely are we picking up on when we note the style of a codebase?</p><h2>Identifying Elements</h2><p>Ideally, to understand these styles, we can consider elements that combine to form a certain style. If we identify the right elements, we should be able to take them, vary them, and combine them to get a particular, recognizable style. Perhaps even, we can see what combinations of these elements are rare, or unseen in the programming world.</p><p>This is what I hope to explore in the essay. I doubt I will get the elements right from the beginning. But perhaps by throwing some out there we can start to think more clearly about what the elements really are. We can find better ways to divide things and start having an understanding of style.</p><h2>Verbose vs Terse</h2><p>We can significantly alter the way we communicate in code by varying our verbosity. This might be at the level of a whole program or in a particular section of code. We might adopt patterns that require a certain level of verbosity (objective C named methods, early redux culture) or adopt whole languages that focus on terseness (j/k/apl).<br/></p><p>Verbose code can help with clarity. Long, expressive function names can help communicate the semantic meaning of the code underneath. Repetitive elements in code can help reinforce patterns, making it clear what code belongs where. Verbose code can guard against errors, preventing simple transpositions from happening by requiring fully specifying the context of a value.</p><p>Terseness can be its own kind of clarity. Terseness can convey unity (eg. mathematical expressions). Terseness can help convey the lack of semantic meaning (eg. single-letter variables). By being terse we can make clear what matters and what doesn’t. With verbose code, it can often be unclear the exact shape of the code. It can be unclear what the relations between parts of the code are, terseness helps us here.</p><h2>Dense vs Sparse</h2><p>Whereas verbose and terseness are related to the way elements are spelled out, density and sparsity are about the relations between these elements. A sparse codebase spreads its functionality out. This can take many different forms, many small classes, spread out across many files is a common example. A dense codebase packs many things into a singular place. </p><p>In some ways, dense vs sparse might seem merely superficial, just concerned with the presentation of code rather than concepts in the code. I think this is far from true. Deciding where we place elements (regardless of what “where” here means) has a big impact on how code is understood. By grouping some things and keeping others separate, we are signaling something to other programmers. </p><p>But this is not merely a signal. We may intentionally make our code dense to, for example, discourage reuse. Large single blocks of code may only serve a very specific purpose that won’t be useful to others. We might keep our code sparse to enable layering of functionality. This is often seen in classes with large inheritance hierarchy structures.</p><h2>Structured vs Unstructured</h2><p>The contrast here between structure vs unstructured is not referring to “structured programming” in the “goto considered harmful sense”. Instead what I am referring to is a program-level structure. Some codebases provide an overarching structure, perhaps providing categories for where each sort of item should go (eg. MVC). Then some codebases are more free-flowing. These don’t provide some sort of meta-narrative about exactly where a bit of code belongs.</p><p>Highly structured code can be a means of communication. By placing elements inside this structure, we are communicating something about these bits of code, we are telling the reader what we consider to be the most important way bits of code are related.</p><p>Less structured code does not communicate any less. By keeping our code less structured, we can signal several things. First, we may be saying that this code is not in its final form, it is in flux and the organization may change. We might also be communicating that this code is a complete whole and does not need to be divided into parts.</p><h2>Direct vs Indirect</h2><p>There are many different ways that directness can display itself in our codebases. First, we may call a function directly, or we might find some indirect means of calling this same function. Perhaps we define an interface and inject something with that interface, that then delegates to our function. </p><p>But direct and indirect are not merely about function calls. We can for example, have code that builds up some tree or hierarchical structure and then interprets it, rather than code that directly runs a computation. We might convey data onto a queue, with some consumer elsewhere rather than locally deal with our data. Directness of course comes in degrees and is relative to a particular structure. Some parts of our code will need to be direct in some way, but they may live inside of a larger indirect structure.</p><h2>Open vs Closed</h2><p>To avoid confusion I should mention from the outset that I don’t mean the Open-Closed principle from solid. Open and Closed here are a bit broader in their meaning. A system might be open by being completely introspectable. It may be closed, by encapsulating or protecting some parts of its data. But this open and closed spectrum does not need to be enforced by the language to be an aspect of our codebase. A codebase can treat a structure that is technically open as if it were closed.</p><p>Open vs closed does not merely refer to data protecting either. A system can be open by accepting data it is unaware of. A closed system may guard the borders, only allowing particular data in the exact shape specified. An open system may expose reflective ability, it may provide metrics, or tracing. A closed system might provide strict guarantees, correctness, performance, memory usage. </p><h2>Generic vs Specific</h2><p>Our code can be Generic or Specific on many different levels. Our function may be polymorphic, allowing it to work on different inputs. Our codebase may be solving a generic problem (a renderer) or a very specific one (a renderer for the Mandelbrot set). Even if we are solving a generic problem, our code can be specific in its details. We may provide specific instantiations of our more generic method. We could on the other hand leave our code entirely generic, acting as a framework for which people can make more specific code.</p><h2>Concrete vs Abstract</h2><p>Concrete vs Abstract may sound a lot like generic vs specific, but I think there are important differences. First, concrete vs abstract is about the subject matter or the concepts used in the application, rather than their capabilities. To give an example, Car may be considered Concrete, whereas Monad might not. Both Car and Monad can be used generically, with more specific instances utilized elsewhere in the codebase. Admittedly, it is much easier to see how abstract code coincides with generic code. But this need not be the case. Perhaps we are writing abstract code about partially ordered sets, but using them for a very specific purpose (proving that certain properties hold).</p><p>Regardless, the use of concretions and abstractions in our codebase is a powerful way to communicate. By making something concrete we put bounds on it, we invite readers to apply their common conceptual categories to it. By making things abstract, we invite readers to expand the bounds of what they consider.</p><h2>An Example</h2><p>I think these elements are great candidates for being elements of programming style. Let’s take a random combination of them and think about what a program written in that style might look like.</p><ul><li>Verbose</li><li>Sparse</li><li>Structured</li><li>Indirect</li><li>Closed</li><li>Specific</li><li>Abstract</li></ul><p>There is a lot to unpack here. First, it must be said that of course, no codebase is uniformly all these things in all its parts, so will be generalizing a bit. Second, trying to think about all these items at once is hard, so let&#x27;s pair them up a bit and think through the implications of those pairings. Combing verbose and sparse might look like a library with a decent amount of boilerplate, where these boilerplate elements are rather spread out, perhaps even orthogonal to each other. We might imagine a verbose and sparse Redux or Rails codebase.</p><p>Structured and Indirect might combine to a structured means of dispatch. We can imagine a dependency injection setup like hibernate. Nothing calls anything directly, but everything has a clear hierarchy. Here again Redux might be a good candidate to consider. A reducer structure with many sections combined with a hierarchy of selectors could meet this criterion. Closed and Structured can be combined as a means of making illegal states unrepresentable. Here, we can ensure that no one can trigger any illegal actions, everything is clearly defined, and it cannot be changed without accounting for our structure.</p><p>Specific and Abstract are a bit harder to imagine. Imagine a web app designed to do a particular thing. It is not meant to be generally applicable or configurable, and yet the entities we find in our program are not concrete and familiar. Instead, we find things like executors, factories, or perhaps our code is organized around a free monad. While the concepts we are employing may be able to be used generally, our code is not doing this. Instead, we have very specific uses of these abstract concepts. Think, about the way people might make interfaces for everything, and yet only have one instance of them</p><p>So given this set, we can think about what it would be like working on a codebase following these styles. First, errors would be dealt with via our structural and closed system. Next, we would not introduce many different concrete types, instead, we would make use of abstract concepts, perhaps certain event types, or operations in an algebra. Further, things would not directly call other things or directly depend on things. Instead, these would be passed around to use or gathered through some abstract means. Further, as we introduce new concepts, we would not colocate them with existing concepts, but instead, following a pattern established by our structure, introduce them in some separate section of the codebase.</p><p>This feels very much like some Java Spring apps I’ve worked on, but also some redux apps I’ve used. These two could not be further from each other in terms of paradigm, and yet, there is a shared sense of style here. Now that does not mean they are equal, it does not mean working on them feels the same, just that they share something in common. Nor do I mean to suggest all Java spring apps or all Redux apps follow this style.</p><h2>Conclusion</h2><p>Hopefully, these elements ring true to you. I think the most questionable distinction here is between abstract and concrete being different from specific and general. And yet, the more I try to get rid of this element, the more I see examples of it. For example, we might write general code, that we give concrete names. Maybe our code just works on some general notion of distance, but we name our parameters <code style="background-color:rgba(27,31,35,0.05);padding:0.2em 0.4em;border-radius:3px;font-family:Monaco, monospace;font-size:13px;white-space:nowrap">distance-in-seconds</code>. Here we have a general, concrete coding style.</p><p>But as I think more about this, explore more codebases and get feedback from people. Perhaps I will come up with a new set, or replace elements on here. Regardless, I think these concepts are useful and helpful for discussing code style. This is something we need to do more of.</p></div></div>]]></description>
            <link>https://jimmyhmiller.github.io/aesthetic-elements</link>
            <guid isPermaLink="false">/aesthetic-elements</guid>
        </item>
    </channel>
</rss>