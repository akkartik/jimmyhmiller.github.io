{"version":3,"file":"static/webpack/static/development/pages/meander-practical.js.4bdc4bee1c0779d6873d.hot-update.js","sources":["webpack:///./utils.js"],"sourcesContent":["import Head from 'next/head';\nimport Link from 'next/link';\nimport SyntaxHighlighter from \"react-syntax-highlighter/dist/cjs/prism-light\";\nimport js from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';\nimport haskell from 'react-syntax-highlighter/dist/cjs/languages/prism/haskell';\nimport clojure from 'react-syntax-highlighter/dist/cjs/languages/prism/clojure';\nimport { solarizedlight } from 'react-syntax-highlighter/dist/styles/prism';\n\n// Super ugly hack to override prism languages\n// I really should make a modern prism, but I will\n// never find time to do that. Warning to future me\n// this causes some weird stuff with hot reloading when changed.\nconst clojure2 = (Prism) => {\n  clojure(Prism);\n  Prism.languages.clojure = {\n    ...Prism.languages.clojure,\n    number: /\\b-?(0x)?\\d*\\.?\\d+\\b/g,\n    logicVariable: /(\\?|!)[a-zA-Z][a-zA-Z0-9-]+/,\n  }\n}\nclojure2.displayName = 'clojure'\nclojure2.aliases = []\n\nSyntaxHighlighter.registerLanguage('javascript', js);\nSyntaxHighlighter.registerLanguage('haskell', haskell);\nSyntaxHighlighter.registerLanguage('clojure', clojure2)\n\n\n\nexport const AbsolutePosition = ({ children, right, top, left, buttom}) =>\n   <div style={{ position: \"absolute\", right, left, top,left}}>\n      {children}\n   </div>\n\nexport const Padding = ({ children, top, left, right, bottom }) =>\n   <div style={{\n      paddingTop: top,\n      paddingLeft: left,\n      paddingRight: right,\n      paddingBottom: bottom,\n   }}>\n      {children}\n   </div>\n\nexport const Margin = ({ children, top, left, right, bottom }) =>\n   <div style={{\n      marginTop: top,\n      marginLeft: left,\n      marginRight: right,\n      marginBottom: bottom,\n   }}>\n      {children}\n   </div>\n\nconst removeFirst = (arr) => {\n  if (arr.length > 1) {\n    arr.shift();\n  }\n  return arr;\n}\n\nexport const detectIndent = source =>\n  /^ */.exec(source)[0].length\n\nexport const removeIndent = (source) => do {\n  const lines = removeFirst(source.split(\"\\n\"))\n  const indent = detectIndent(lines[0])\n  lines\n    .map(s => s.substring(indent, s.length))\n    .join(\"\\n\")\n}\n\n\nexport const formatCode = (source) => {\n  return removeIndent(source)\n}\n\n\nexport const modifiedSolarizedLight = {\n  ...solarizedlight,\n  \"operator\": {\n    color: \"#cb4b16\"\n  },\n  \"logicVariable\": {\n    color: \"#2aa198\"\n  },\n  \"pre[class*=\\\"language-\\\"]\": {\n    ...solarizedlight[\"pre[class*=\\\"language-\\\"]\"],\n    backgroundColor: \"#fff\",\n  },\n}\n\nexport const Code = ({ source, language }) => {\n  return (\n    <SyntaxHighlighter\n      language={language}\n      style={modifiedSolarizedLight}\n    >\n      {formatCode(source)}\n    </SyntaxHighlighter>\n  )\n}\n\nexport const Javascript = ({ children }) => \n  <Code\n    language=\"javascript\"\n    source={children} />\n\nexport const Haskell = ({ children }) => \n  <Code\n    language=\"haskell\"\n    source={children} />\n\nexport const Clojure = ({ children }) => \n  <Code\n    language=\"clojure\"\n    source={children} />\n\nconst GlobalStyles = () => \n   <style global jsx>\n   {`\n      body {\n        font-family: helvetica, sans-serif;\n        color: #333;\n        line-height: 1.5;\n      }\n      a {\n        color: #333;\n      }\n   `}\n   </style>\n\nconst Container = ({children}) =>\n   <div style={{\n      margin: \"0 auto\",\n      maxWidth: 700,\n   }}>\n      {children}\n   </div>\n\nconst ListItem = ({ href, text, Elem }) =>\n  <li key={href}>\n    <Elem>\n      <Link href={href} as={href + \"/\"}>\n        <a>{text}</a>\n      </Link>\n    </Elem>\n  </li>\n\nexport const LargeText = ({ children }) => \n  <p style={{fontSize: \"1.5em\"}}>\n    {children}\n  </p>\n\nexport const LinkList = ({ items, Elem=LargeText, title }) =>\n  <>\n    <Heading text={title} />\n    <ul>\n      {items.map(item => ListItem({...item, Elem}))}\n    </ul>\n  </>\n\nexport const Heading = ({ color, text, size=1 }) => do {\n  const sizeToElem = {1: \"h1\", 2: \"h2\", 3: \"h3\", \"4\": \"h4\"}\n  const Elem = sizeToElem[size];\n  <Elem style={{ color }}>\n    {text}\n  </Elem>\n}\n\nexport const Term = ({children}) =>\n  <code style={{\n    backgroundColor: \"rgba(27,31,35,0.05)\",\n    padding: \"0.2em 0.4em\",\n    borderRadius: 3,\n    fontFamily: \"Monaco, monospace\",\n    fontSize: 13,\n    whiteSpace: \"nowrap\"\n  }}>\n    {children}\n  </code>\n\nexport const BlockQuote = ({children}) =>\n  <blockquote style={{\n    paddingLeft: 20,\n    margin: 0,\n    marginLeft: 20,\n    borderLeft: \"0.25em solid #dfe2e5\",\n  }}>\n    {children}\n  </blockquote>\n\nexport const Title = ({ text }) => \n  <>\n    <Head>\n      <title>{text}</title>\n    </Head>\n    <Heading text={text} size={1} />\n  </>\n\n\nexport const GlobalLayout = ({ children }) =>\n  <>\n    <Head>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\" />\n      <meta name=\"author\" content=\"Jimmy Miller\" />\n    </Head>\n    <GlobalStyles />\n    <Container>\n      <div style={{position: \"relative\"}}>\n          <AbsolutePosition right={0} top={0}>\n          <a href=\"/\" style={{textDecoration: \"none\"}}>\n            <Heading\n               color=\"#999\"\n               text=\"Jimmy Miller\"/>\n          </a>\n          </AbsolutePosition>\n      </div>\n      <Padding top={70}>\n        {children}\n      </Padding>\n    </Container>\n  </>\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAJA;AASA;AACA;AACA;AAGA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAEA;AAFA;AARA;AAcA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAalBA;;;;A","sourceRoot":""}